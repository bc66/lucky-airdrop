{"version":3,"sources":["webpack:///./node_modules/_core-js@2.6.5@core-js/modules/_object-sap.js","webpack:///./node_modules/_thor-devkit@0.10.1@thor-devkit/es6/rlp.js","webpack:///src/components/ClaimCard.vue","webpack:///./node_modules/_core-js@2.6.5@core-js/modules/es6.function.name.js","webpack:///./node_modules/_core-js@2.6.5@core-js/modules/es6.object.keys.js","webpack:///./src/views/Claim.vue?3202","webpack:///./src/views/Claim.vue?7496","webpack:///./src/views/Claim.vue","webpack:///./node_modules/_core-js@2.6.5@core-js/modules/web.dom.iterable.js","webpack:///./src/components/AfterClaimCard.vue?c09f","webpack:///src/components/AfterClaimCard.vue","webpack:///./src/components/AfterClaimCard.vue?4691","webpack:///./src/components/AfterClaimCard.vue","webpack:///./node_modules/_thor-devkit@0.10.1@thor-devkit/es6/transaction.js","webpack:///./node_modules/_core-js@2.6.5@core-js/modules/es6.string.iterator.js","webpack:///./node_modules/_@babel_runtime@7.4.2@@babel/runtime/helpers/esm/arrayWithoutHoles.js","webpack:///./node_modules/_@babel_runtime@7.4.2@@babel/runtime/helpers/esm/iterableToArray.js","webpack:///./node_modules/_@babel_runtime@7.4.2@@babel/runtime/helpers/esm/nonIterableSpread.js","webpack:///./node_modules/_@babel_runtime@7.4.2@@babel/runtime/helpers/esm/toConsumableArray.js","webpack:///./node_modules/_@babel_runtime@7.4.2@@babel/runtime/helpers/esm/arrayWithHoles.js","webpack:///./node_modules/_@babel_runtime@7.4.2@@babel/runtime/helpers/esm/iterableToArrayLimit.js","webpack:///./node_modules/_@babel_runtime@7.4.2@@babel/runtime/helpers/esm/nonIterableRest.js","webpack:///./node_modules/_@babel_runtime@7.4.2@@babel/runtime/helpers/esm/slicedToArray.js","webpack:///./node_modules/_bignumber.js@7.2.1@bignumber.js/bignumber.js","webpack:///./src/components/ClaimCard.vue?96cb","webpack:///./src/components/ClaimCard.vue?a0d6","webpack:///./src/components/ClaimCard.vue","webpack:///./node_modules/_rlp@2.2.3@rlp/dist/index.js","webpack:///./node_modules/_core-js@2.6.5@core-js/modules/_string-at.js","webpack:///src/views/Claim.vue"],"names":["$export","__webpack_require__","core","fails","module","exports","KEY","exec","fn","Object","exp","S","F","Buffer","d","__webpack_exports__","RLP","bignumber_js__WEBPACK_IMPORTED_MODULE_0__","bignumber_js__WEBPACK_IMPORTED_MODULE_0___default","n","rlp__WEBPACK_IMPORTED_MODULE_1__","[object Object]","profile","this","data","packed","pack","buf","unpack","obj","ctx","name","kind","ScalarKind","encode","Array","isArray","map","k","assert","item","part","i","RawKind","isBuffer","buffer","decode","parts","length","reduce","o","p","cond","msg","RLPError","isHexString","str","test","isDecString","NumericKind","maxBytes","super","isHex","isDec","Number","isSafeInteger","bn","a","isZero","alloc","hex","toString","from","num","toNumber","BlobKind","slice","FixedBlobKind","bytes","encoder","decoder","NullableFixedBlobKind","CompactFixedBlobKind","nzIndex","findIndex","v","zeros","repeat","Error","GAS_PER_CLAIMER","ipfs","ipfs_mini__WEBPACK_IMPORTED_MODULE_2___default","host","port","protocol","components","AfterClaimCard","_components_AfterClaimCard_vue__WEBPACK_IMPORTED_MODULE_3__","props","visitor","String","tokenName","envelope","claimed","isClaiming","counter","cTicker","mounted","_this","messageLink","cat","then","message","destroyed","clearInterval","watch","envelope.messageLink","val","oldVal","_this2","methods","claim","_this3","spk","atob","$route","params","code","claimABI","constant","inputs","type","outputs","payable","stateMutability","text","thor_devkit__WEBPACK_IMPORTED_MODULE_4__","encodeParameters","id","signature","thor_devkit__WEBPACK_IMPORTED_MODULE_5__","secp256k1","sign","keccak256","Function","setInterval","refreshCounter","fetch","$config","providerUrl","resp","json","block","blockRef","body","chainTag","expiration","clauses","to","contract","value","gasPriceCoef","gas","dependsOn","nonce","Date","tx","thor_devkit__WEBPACK_IMPORTED_MODULE_6__","signingHash","blake2b256","raw","JSON","stringify","headers","content-type","method","response","getReceipt","err","receipt","reverted","console","error","concat","events","claimAmount","$set","totalClaimers","bignumber_js__WEBPACK_IMPORTED_MODULE_1___default","div","Math","pow","toFixed","localStorage","setItem","network","catch","txID","cb","url","_getReceipt","log","setTimeout","dP","f","FProto","prototype","nameRE","NAME","configurable","get","match","e","toObject","$keys","it","render","_vm","_h","$createElement","_c","_self","staticClass","attrs","_v","href","accountLink","target","_s","version","x","y","viewBox","xml:space","cx","cy","r","_m","directives","rawName","expression","class","has-error","isAddress","placeholder","domProps","on","input","$event","composing","address","disabled","click","handleContinue","_e","shareLink","role","status","staticRenderFns","views_Claimvue_type_script_lang_js_","Claimvue_type_script_lang_js_","component","componentNormalizer","$iterators","getKeys","redefine","global","hide","Iterators","wks","ITERATOR","TO_STRING_TAG","ArrayValues","DOMIterables","CSSRuleList","CSSStyleDeclaration","CSSValueList","ClientRectList","DOMRectList","DOMStringList","DOMTokenList","DataTransferItemList","FileList","HTMLAllCollection","HTMLCollection","HTMLFormElement","HTMLSelectElement","MediaList","MimeTypeArray","NamedNodeMap","NodeList","PaintRequestList","Plugin","PluginArray","SVGLengthList","SVGNumberList","SVGPathSegList","SVGPointList","SVGStringList","SVGTransformList","SourceBufferList","StyleSheetList","TextTrackCueList","TextTrackList","TouchList","collections","key","explicit","Collection","proto","duration","datetime","title","_f","initialBalance","nickname","src_default","AfterClaimCardvue_type_script_lang_js_","components_AfterClaimCardvue_type_script_lang_js_","Transaction","_cry__WEBPACK_IMPORTED_MODULE_0__","_cry__WEBPACK_IMPORTED_MODULE_1__","_cry__WEBPACK_IMPORTED_MODULE_2__","_rlp__WEBPACK_IMPORTED_MODULE_3__","unsignedTxRLP","_a","txRLP","sig","assign","reserved","pubKey","recover","signer","intrinsicGas","sigHex","txGas","clauseGas","clauseGasContractCreation","sum","c","dataGas","zgas","nzgas","substr","$at","iterated","_t","_i","point","O","index","undefined","done","_arrayWithoutHoles","arr","arr2","_iterableToArray","iter","Symbol","iterator","call","_nonIterableSpread","TypeError","_toConsumableArray","_arrayWithHoles","_iterableToArrayLimit","_arr","_n","_d","next","push","_nonIterableRest","_slicedToArray","__WEBPACK_AMD_DEFINE_RESULT__","globalObject","BigNumber","isNumeric","mathceil","ceil","mathfloor","floor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","clone","configObject","convertBase","parseNumeric","P","constructor","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","decimalSeparator","groupSeparator","groupSize","secondaryGroupSize","fractionGroupSeparator","fractionGroupSize","ALPHABET","b","alphabet","caseChanged","isNum","len","s","charCodeAt","indexOf","replace","search","substring","intCheck","round","DEBUG","charAt","toUpperCase","toLowerCase","format","rm","c0","ne","coeffToString","toExponential","toFixedPoint","maxOrMin","args","m","normalise","j","pop","sd","ni","rd","xc","pows10","out","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","set","hasOwnProperty","crypto","getRandomValues","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","_isBigNumber","maximum","max","arguments","lt","minimum","min","gt","random","pow2_53","random53bitInt","dp","rand","Uint32Array","copy","splice","decimal","toBaseOut","baseIn","baseOut","arrL","reverse","callerIsToString","multiply","base","temp","xlo","xhi","carry","klo","khi","compare","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","yc","NaN","bitFloor","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","isNaN","p1","p2","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","isInteger","isOdd","mod","times","integerValue","isEqualTo","eq","isFinite","isGreaterThan","isGreaterThanOrEqualTo","gte","isLessThan","isLessThanOrEqualTo","lte","isNegative","isPositive","minus","t","xLTy","plus","xe","ye","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","sqrtBase","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFormat","split","g1","g2","intPart","fractionPart","isNeg","intDigits","RegExp","toFraction","md","d0","d1","d2","n0","n1","toPrecision","toJSON","z","l","zs","components_ClaimCardvue_type_script_lang_js_","ClaimCardvue_type_script_lang_js_","defineProperty","BN","output","encodeLength","inputBuf","toBuffer","safeParseInt","parseInt","offset","hexLength","intToHex","lLength","firstByte","stream","inputBuffer","decoded","_decode","remainder","getLength","llength","innerRemainder","totalLength","isHexPrefixed","stripHexPrefix","integer","padToEven","intToBuffer","Uint8Array","isBN","toArray","toInteger","defined","TO_STRING","that","pos","CertModal","_components_CertModal_vue__WEBPACK_IMPORTED_MODULE_9__","ShareCard","_components_ShareCard_vue__WEBPACK_IMPORTED_MODULE_13__","RedPacketInfo","_components_RedPacketInfo_vue__WEBPACK_IMPORTED_MODULE_10__","ClaimCard","_components_ClaimCard_vue__WEBPACK_IMPORTED_MODULE_11__","_components_AfterClaimCard_vue__WEBPACK_IMPORTED_MODULE_12__","window","location","isCreator","hasConnex","showInptModal","showCertModal","created","_this$$route$params","packet_id","getItem","_utils__WEBPACK_IMPORTED_MODULE_7__","connex","getRevealInfo","thor_devkit__WEBPACK_IMPORTED_MODULE_14__","derivePublicKey","addr","publicKeyToAddress","secretSigner","signingService","vendor","request","purpose","payload","content","result","setAccount","annex","getPacketInfo","setUserRole","accountBaseUrl","creator","vm","getEnvelopeInfoABI","getClaimInfoABI","Promise","all","callMethod","_ref","_ref2","_Users_channer_Projects_workspace_dapps_lucky_airdrop_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_3__","info","claiminfo","ts","bignumber_js__WEBPACK_IMPORTED_MODULE_8___default","getTokenNameByAddress","tokenAddress","_this4","getEnvelopeRevealABI","reveal","_this5","keys","tokens","forEach","_abi","_values","thor_devkit__WEBPACK_IMPORTED_MODULE_15__","apply","_Users_channer_Projects_workspace_dapps_lucky_airdrop_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","caller","decodeParameters"],"mappings":"4FACA,IAAAA,EAAcC,EAAQ,QACtBC,EAAWD,EAAQ,QACnBE,EAAYF,EAAQ,QACpBG,EAAAC,QAAA,SAAAC,EAAAC,GACA,IAAAC,GAAAN,EAAAO,QAAA,IAA6BH,IAAAG,OAAAH,GAC7BI,EAAA,GACAA,EAAAJ,GAAAC,EAAAC,GACAR,IAAAW,EAAAX,EAAAY,EAAAT,EAAA,WAAqDK,EAAA,KAAS,SAAAE,wCCR9D,SAAAG,GAAAZ,EAAAa,EAAAC,EAAA,sBAAAC,IAAA,IAAAC,EAAAhB,EAAA,QAAAiB,EAAAjB,EAAAkB,EAAAF,GAAAG,EAAAnB,EAAA,QAEO,MAAAe,EACPK,YAAAC,GACAC,KAAAD,UAMAD,OAAAG,GACA,MAAAC,EAAAC,EAAAF,EAAAD,KAAAD,QAAA,IACA,OAAeF,EAAA,UAAUK,GAMzBJ,OAAAM,GACA,MAAAF,EAAuBL,EAAA,UAAUO,GACjC,OAAAC,EAAAH,EAAAF,KAAAD,QAAA,KAkKA,SAAAI,EAAAG,EAAAP,EAAAQ,GACAA,MAAA,IAAAR,EAAAS,KAAAT,EAAAS,KACA,MAAAC,EAAAV,EAAAU,KACA,GAAAA,aAAAhB,EAAAiB,WACA,OAAAD,EAAAR,KAAAK,EAAAC,GAAAI,SAEA,GAAAC,MAAAC,QAAAJ,GACA,OAAAA,EAAAK,IAAAC,GAAAZ,EAAAG,EAAAS,EAAAP,MAAAO,EAAAR,IAEAS,EAAAJ,MAAAC,QAAAP,GAAAC,EAAA,kBACA,MAAAU,EAAAR,EAAAQ,KACA,OAAAX,EAAAQ,IAAA,CAAAI,EAAAC,IAAAhB,EAAAe,EAAA,CAA4CV,KAAA,IAAAW,EAAAV,KAAAQ,GAA4BV,IAExE,SAAAF,EAAAH,EAAAH,EAAAQ,GACAA,MAAA,IAAAR,EAAAS,KAAAT,EAAAS,KACA,MAAAC,EAAAV,EAAAU,KACA,GAAAA,aAAAhB,EAAAiB,WAIA,OAHAD,aAAAhB,EAAA2B,SACAJ,EAAA1B,EAAA+B,SAAAnB,GAAAK,EAAA,mBAEAE,EAAAa,OAAApB,EAAAK,GAAAgB,SAEA,GAAAX,MAAAC,QAAAJ,GAAA,CACAO,EAAAJ,MAAAC,QAAAX,GAAAK,EAAA,kBACA,MAAAiB,EAAAtB,EAEA,OADAc,EAAAQ,EAAAC,SAAAhB,EAAAgB,OAAAlB,cAA8DE,EAAAgB,yBAA8BD,EAAAC,UAC5FhB,EAAAiB,OAAA,CAAAC,EAAAC,EAAAT,KAEA,OADAQ,EAAAC,EAAApB,MAAAH,EAAAmB,EAAAL,GAAAS,EAAArB,GACAoB,GACS,IAETX,EAAAJ,MAAAC,QAAAX,GAAAK,EAAA,kBACA,MAAAU,EAAAR,EAAAQ,KACA,OAAAf,EAAAY,IAAA,CAAAI,EAAAC,IAAAd,EAAAa,EAAA,CAAiDV,KAAA,IAAAW,EAAAV,KAAAQ,GAA4BV,IAE7E,SAAAS,EAAAa,EAAAtB,EAAAuB,GACA,IAAAD,EACA,UAAAE,KAA8BxB,MAAQuB,KAGtC,SAAAE,EAAAC,GACA,uBAAAC,KAAAD,GAEA,SAAAE,EAAAF,GACA,iBAAAC,KAAAD,IA3MA,SAAAxC,GAEA,MAAAiB,GAEAjB,EAAAiB,aAEA,MAAAU,UAAAV,EACAZ,KAAAG,EAAAM,GACA,OAAoBT,SAAW,OAAAG,IAE/BH,OAAAM,EAAAG,GACA,OAAoBT,SAAW,OAAAM,KAG/BX,EAAA2B,UAEA,MAAAgB,UAAA1B,EAKAZ,YAAAuC,GACAC,QACAtC,KAAAqC,WAEAvC,KAAAG,EAAAM,GAEA,GADAS,EAAA,kBAAAf,GAAA,kBAAAA,EAAAM,EAAA,6BACA,kBAAAN,EAAA,CACA,MAAAsC,EAAAP,EAAA/B,GACAuC,EAAAL,EAAAlC,GACAe,EAAAuB,GAAAC,EAAAjC,EAAA,sDACAgC,GACAvB,EAAAf,EAAAwB,OAAA,EAAAlB,EAAA,kCAIAS,EAAAyB,OAAAC,cAAAzC,OAAA,EAAAM,EAAA,sCAEA,MAAAoC,EAAA,IAA2BhD,EAAAiD,EAAS3C,GACpC,GAAA0C,EAAAE,SACA,OACA/C,SACA,OAAAR,EAAAwD,MAAA,KAIA,IAAAC,EAAAJ,EAAAK,SAAA,IAKA,OAJAD,EAAAtB,OAAA,QACAsB,EAAA,IAAAA,GAEA/B,GAAAhB,KAAAqC,UAAAU,EAAAtB,QAAA,EAAAzB,KAAAqC,SAAA9B,wBAAsGP,KAAAqC,kBACtG,CACAvC,SACA,OAAAR,EAAA2D,KAAAF,EAAA,SAIAjD,OAAAM,EAAAG,GAGA,OAFAS,GAAAhB,KAAAqC,UAAAjC,EAAAqB,QAAAzB,KAAAqC,SAAA9B,wBAAkGP,KAAAqC,kBAClGrB,EAAA,IAAAZ,EAAAqB,QAAA,IAAArB,EAAA,GAAAG,EAAA,sDACA,CACAT,SACA,OAAAM,EAAAqB,OACA,SAEA,MAAAkB,EAAA,IAAmChD,EAAAiD,EAASxC,EAAA4C,SAAA,WAC5CE,EAAAP,EAAAQ,WACA,OAAAV,OAAAC,cAAAQ,KAAA,KAAAP,EAAAK,SAAA,OAKAvD,EAAA2C,cAEA,MAAAgB,UAAA1C,EACAZ,KAAAG,EAAAM,GAGA,OAFAS,EAAAgB,EAAA/B,GAAAM,EAAA,uBACAS,EAAAf,EAAAwB,OAAA,MAAAlB,EAAA,4BACA,CACAT,SACA,OAAAR,EAAA2D,KAAAhD,EAAAoD,MAAA,YAIAvD,OAAAM,EAAAG,GACA,OACAT,SACA,WAAAM,EAAA4C,SAAA,UAKAvD,EAAA2D,WAEA,MAAAE,UAAAF,EACAtD,YAAAyD,GACAjB,QACAtC,KAAAuD,QAEAzD,KAAAG,EAAAM,GACA,MAAAiD,EAAAlB,MAAArC,OAAAM,GAEA,OADAS,EAAAf,EAAAwB,SAAA,EAAAzB,KAAAuD,MAAA,EAAAhD,kCAA4FP,KAAAuD,eAC5FC,EAEA1D,OAAAM,EAAAG,GACA,MAAAkD,EAAAnB,MAAAhB,OAAAlB,EAAAG,GAEA,OADAS,EAAAZ,EAAAqB,SAAAzB,KAAAuD,MAAAhD,cAA+DP,KAAAuD,eAC/DE,GAGAhE,EAAA6D,gBAEA,MAAAI,UAAAJ,EACAxD,KAAAG,EAAAM,GACA,OAAAN,EAOAqC,MAAArC,OAAAM,GANA,CACAT,SACA,OAAAR,EAAAwD,MAAA,KAMAhD,OAAAM,EAAAG,GACA,WAAAH,EAAAqB,OACA,CAAwB3B,SAAW,cAEnCwC,MAAAhB,OAAAlB,EAAAG,IAGAd,EAAAiE,wBAEA,MAAAC,UAAAL,EACAxD,KAAAG,EAAAM,GACA,MAAAH,EAAAkC,MAAArC,OAAAM,GAAAI,SACA,OACAb,SACA,MAAA8D,EAAAxD,EAAAyD,UAAAC,GAAA,IAAAA,GACA,OAAAF,GAAA,EACAxD,EAAAiD,MAAAO,GAEAtE,EAAAwD,MAAA,KAIAhD,OAAAM,EAAAG,GACAS,EAAAZ,EAAAqB,QAAAzB,KAAAuD,MAAAhD,wBAAwEP,KAAAuD,eACxEvC,EAAA,IAAAZ,EAAAqB,QAAA,IAAArB,EAAA,GAAAG,EAAA,kCACA,MAAAgD,EAAAvD,KAAAuD,MACA,OACAzD,SACA,MAAAiE,EAAA,IAAAC,OAAA,GAAAT,EAAAnD,EAAAqB,SACA,WAAAsC,EAAA3D,EAAA4C,SAAA,UAKAvD,EAAAkE,wBA7JA,CA8JClE,MAAA,KA+CD,MAAAsC,UAAAkC,MACAnE,YAAAgC,GACAQ,MAAAR,GACA9B,KAAAQ,KAAAuB,EAAAvB,+LChLA0D,EAAA,IACAC,EAAA,IAAAC,EAAAxB,EAAA,CAAAyB,KAAA,iBAAAC,KAAA,KAAAC,SAAA,UAGA/E,EAAA,MACAgB,KAAA,YACAgE,WAAA,CACAC,eAAAC,EAAA,MAEAC,MAAA,CACAC,QAAAC,OACAC,UAAAD,OACAE,SAAA7F,QAEAe,KAVA,WAWA,OACA+E,SAAA,EACAC,YAAA,EACAC,QAAA,GACAC,QAAA,OAGAC,QAlBA,WAkBA,IAAAC,EAAArF,KACAA,KAAA+E,SAAAO,aACAnB,EAAAoB,IAAAvF,KAAA+E,SAAAO,aAAAE,KAAA,SAAAC,GACAJ,EAAAN,SAAAU,aAIAC,UAzBA,WA0BAC,cAAA3F,KAAAmF,UAEAS,MAAA,CACAC,uBAAA,SAAAC,EAAAC,GAAA,IAAAC,EAAAhG,KACAA,KAAA+E,SAAAO,aACAnB,EAAAoB,IAAAO,GAAAN,KAAA,SAAAC,GACAO,EAAAjB,SAAAU,cAKAQ,QAAA,CACAC,MADA,WACA,IAAAC,EAAAnG,KACAA,KAAAiF,YAAA,EACA,IAAAmB,EAAAC,KAAArG,KAAAsG,OAAAC,OAAAC,MACAC,EAAA,CAAAC,UAAA,EAAAC,OAAA,EAAAnG,KAAA,MAAAoG,KAAA,YAAApG,KAAA,eAAAoG,KAAA,YAAApG,KAAA,aAAAoG,KAAA,UAAApG,KAAA,gBAAAqG,QAAA,GAAAC,SAAA,EAAAC,gBAAA,aAAAH,KAAA,YAEAL,EAAA,EAAA/F,KAAA,KAAAoG,KAAA,YAAApG,KAAA,UAAAoG,KAAA,YACAI,EAAAC,EAAA,KAAAC,iBAAAX,EAAA,CAAAvG,KAAA+E,SAAAoC,GAAAnH,KAAA4E,UAEAwC,EAAAC,EAAA,KAAAC,UAAAC,KAAAF,EAAA,KAAAG,UAAAlI,EAAA2D,KAAA+D,EAAA3D,MAAA,WAAA/D,EAAA2D,KAAAmD,EAAA/C,MAAA,WACApD,EAAA,IAAAgH,EAAA,KAAAQ,SAAAhB,GAAA9F,OAAAX,KAAA+E,SAAAoC,GAAAnH,KAAA4E,QAAA,KAAAwC,EAAApE,SAAA,QAEAhD,KAAAmF,QAAAuC,YAAA1H,KAAA2H,eAAA,KAEAC,MAAA5H,KAAA6H,QAAAC,YAAA,gBAAAtC,KAAA,SAAAuC,GAAA,OAAAA,EAAAC,SACAxC,KAAA,SAAAyC,GACA,IAAAC,EAAAD,EAAAd,GAAA9D,MAAA,MAEA8E,EAAA,CACAC,SAAAjC,EAAA0B,QAAAO,SACAF,WACAG,WAAA,IACAC,QAAA,EAAAC,GAAApC,EAAA0B,QAAAW,SAAAC,MAAA,MAAAxI,SACAyI,aAAA,EACAC,IAAAzE,EACA0E,UAAA,KACAC,OAAA,IAAAC,MAGAC,EAAA,IAAAC,EAAA,KAAAb,GACAc,EAAA5B,EAAA,KAAA6B,WAAAH,EAAApI,UACAoI,EAAA3B,UAAAC,EAAA,KAAAC,UAAAC,KAAA0B,EAAA3J,EAAA2D,KAAAmD,EAAA/C,MAAA,WACA,IAAA8F,EAAA,KAAAJ,EAAApI,SAAAqC,SAAA,OAEA,OAAA4E,MAAAzB,EAAA0B,QAAAC,YAAA,iBACAK,KAAAiB,KAAAC,UAAA,CAAAF,QACAG,QAAA,CAAAC,eAAA,oBACAC,OAAA,SAEAhE,KAAA,SAAAiE,GAAA,OAAAA,EAAAzB,SACAxC,KAAA,SAAAuD,GACA5C,EAAAuD,WAAAX,EAAA5B,GAAA,SAAAwC,EAAAC,GACA,IAAAD,EAGA,GAFAxD,EAAAlB,YAAA,EAEA2E,EAAAC,SAEAC,QAAAC,MAAA,yBAAAC,OAAAjB,EAAA5B,SACA,CACAhB,EAAAnB,SAAA,EACA,IAAAiF,EAAAL,EAAA/C,QAAA,GAAAoD,OACAC,EAAAD,IAAAxI,OAAA,GAAAxB,KAEAkG,EAAAgE,KAAAhE,EAAApB,SAAA,gBAAAoB,EAAApB,SAAAqF,cAAA,GACAjE,EAAAgE,KAAAhE,EAAApB,SAAA,cAAAsF,EAAAzH,EAAAsH,EAAA,IAAAI,IAAAC,KAAAC,IAAA,QAAAC,QAAA,IAGAC,aAAAC,QAAA,WAAAX,OAAA7D,EAAA0B,QAAA+C,QAAA,KAAAZ,OAAA7D,EAAApB,SAAAoC,IAAAhB,EAAAvB,gBAKAiG,MAAA,SAAAlB,GACAG,QAAAC,MAAAJ,GACAxD,EAAAlB,YAAA,KAIAyE,WApEA,SAoEAoB,EAAAC,GACA,IAAA7F,EAAA,EACA8F,EAAAhL,KAAA6H,QAAAC,YAAA,iBAAAkC,OAAAc,EAAA,YAEA,SAAAG,IACA/F,IAEA0C,MAAAoD,GAAAxF,KAAA,SAAAuC,GAAA,OAAAA,EAAAC,SACAxC,KAAA,SAAAoE,GAGA,OAFAE,QAAAoB,IAAAtB,GAEAA,EACAmB,EAAA,KAAAnB,GAEA1E,EAAA,OACAiG,WAAAF,EAAA,KAEAF,EAAA,IAAA9G,MAAA,+BAKAgH,KAEAtD,eA5FA,WA6FA,GAAA3H,KAAAkF,UACAlF,KAAAkF,QAAA,IAEAlF,KAAAkF,mEChMA,IAAAkG,EAAS1M,EAAQ,QAAc2M,EAC/BC,EAAA7D,SAAA8D,UACAC,EAAA,wBACAC,EAAA,OAGAA,KAAAH,GAAkB5M,EAAQ,SAAgB0M,EAAAE,EAAAG,EAAA,CAC1CC,cAAA,EACAC,IAAA,WACA,IACA,UAAA3L,MAAA4L,MAAAJ,GAAA,GACK,MAAAK,GACL,mCCXA,IAAAC,EAAepN,EAAQ,QACvBqN,EAAYrN,EAAQ,QAEpBA,EAAQ,OAARA,CAAuB,kBACvB,gBAAAsN,GACA,OAAAD,EAAAD,EAAAE,iDCNA,IAAAC,EAAA,WAA0B,IAAAC,EAAAlM,KAAamM,EAAAD,EAAAE,eAA0BC,EAAAH,EAAAI,MAAAD,IAAAF,EAAwB,OAAAE,EAAA,OAAiBE,YAAA,OAAkB,CAAAF,EAAA,UAAeE,YAAA,wBAAAC,MAAA,CAA2CrF,GAAA,WAAe,CAAAkF,EAAA,OAAYE,YAAA,0BAAqC,CAAAF,EAAA,OAAYE,YAAA,OAAkB,CAAAF,EAAA,OAAYE,YAAA,iDAA4D,CAAAF,EAAA,MAAAA,EAAA,eAA6BG,MAAA,CAAOjE,GAAA,CAAM/H,KAAA,UAAgB,CAAA0L,EAAAO,GAAA,yBAAAJ,EAAA,OAA4CE,YAAA,wCAAmD,CAAAF,EAAA,OAAYE,YAAA,2BAAsC,CAAAF,EAAA,OAAYE,YAAA,uCAAkD,CAAAF,EAAA,OAAAA,EAAA,UAAAH,EAAAO,GAAA,oBAAAJ,EAAA,QAAAA,EAAA,KAAuEG,MAAA,CAAOE,KAAAR,EAAAS,YAAAC,OAAA,WAA0C,CAAAV,EAAAO,GAAAP,EAAAW,GAAAX,EAAAtH,gBAAAsH,EAAAO,GAAA,sBAAAJ,EAAA,OAAAA,EAAA,UAAAH,EAAAO,GAAA,eAAAP,EAAAO,GAAAP,EAAAW,GAAAX,EAAAtB,wBAAAyB,EAAA,OAAkKE,YAAA,aAAwB,CAAAL,EAAA,cAAAG,EAAA,OAAgCE,YAAA,yBAAoC,CAAAF,EAAA,OAAYE,YAAA,8BAAyC,CAAAF,EAAA,OAAYE,YAAA,4BAAuC,CAAAF,EAAA,QAAaE,YAAA,YAAuB,CAAAF,EAAA,OAAYE,YAAA,gBAAAC,MAAA,CAAmCM,QAAA,MAAAC,EAAA,MAAAC,EAAA,MAAAC,QAAA,cAAAC,YAAA,aAAoF,CAAAb,EAAA,UAAeG,MAAA,CAAOW,GAAA,OAAAC,GAAA,KAAAC,EAAA,SAAiChB,EAAA,QAAaG,MAAA,CAAOjN,EAAA,saAAka8M,EAAA,OAAkBE,YAAA,4BAAuC,CAAAF,EAAA,OAAYE,YAAA,mBAA8B,CAAAF,EAAA,OAAYE,YAAA,mBAA8B,CAAAF,EAAA,MAAAH,EAAAO,GAAA,wBAAAP,EAAAoB,GAAA,GAAAjB,EAAA,OAA8DE,YAAA,mBAA8B,CAAAF,EAAA,OAAYE,YAAA,eAA0B,CAAAF,EAAA,SAAckB,WAAA,EAAa/M,KAAA,QAAAgN,QAAA,UAAA/E,MAAAyD,EAAA,QAAAuB,WAAA,YAAwEC,MAAA,CAASC,aAAAzB,EAAA0B,aAA8BpB,MAAA,CAAQ5F,KAAA,OAAAiH,YAAA,MAAiCC,SAAA,CAAWrF,MAAAyD,EAAA,SAAsB6B,GAAA,CAAKC,MAAA,SAAAC,GAAyBA,EAAArB,OAAAsB,YAAsChC,EAAAiC,QAAAF,EAAArB,OAAAnE,iBAAkC4D,EAAA,OAAkBE,YAAA,kCAA6C,CAAAF,EAAA,UAAeG,MAAA,CAAO4B,UAAAlC,EAAA0B,aAA4BG,GAAA,CAAKM,MAAAnC,EAAAoC,iBAA4B,CAAAjC,EAAA,MAAAH,EAAAO,GAAA,0BAAAP,EAAAqC,KAAAlC,EAAA,aAAqEG,MAAA,CAAOgC,UAAAtC,EAAAsC,aAA2B,WAAAtC,EAAAuC,KAAApC,EAAA,iBAA4CG,MAAA,CAAO5H,QAAAsH,EAAAtH,QAAAG,SAAAmH,EAAAnH,SAAAD,UAAAoH,EAAApH,aAAyE,WAAAoH,EAAAuC,MAAA,QAAAvC,EAAAnH,SAAAC,SAAA,KAAAkH,EAAAnH,SAAA2J,OAAArC,EAAA,aAAwGG,MAAA,CAAO5H,QAAAsH,EAAAtH,QAAAG,SAAAmH,EAAAnH,SAAAD,UAAAoH,EAAApH,aAAyE,WAAAoH,EAAAuC,MAAA,QAAAvC,EAAAnH,SAAAC,QAAAqH,EAAA,kBAA+EG,MAAA,CAAOzH,SAAAmH,EAAAnH,SAAAD,UAAAoH,EAAApH,aAAmDuH,EAAA,iBAAsBG,MAAA,CAAO5H,QAAAsH,EAAAtH,QAAAG,SAAAmH,EAAAnH,SAAAD,UAAAoH,EAAApH,aAAyEuH,EAAA,aAAkBkB,WAAA,EAAa/M,KAAA,OAAAgN,QAAA,SAAA/E,MAAAyD,EAAA,cAAAuB,WAAA,qBAAoF,MAC/qGkB,EAAA,YAAoC,IAAAzC,EAAAlM,KAAamM,EAAAD,EAAAE,eAA0BC,EAAAH,EAAAI,MAAAD,IAAAF,EAAwB,OAAAE,EAAA,MAAAA,EAAA,QAAAH,EAAAO,GAAA,0DAAAJ,EAAA,sBCDgVuC,EAAAC,EAAA,iBCOnbC,EAAgB5P,OAAA6P,EAAA,KAAA7P,CACd0P,EACA3C,EACA0C,GACF,EACA,KACA,KACA,MAIenP,EAAA,WAAAsP,kCC2Bf,IA7CA,IAAAE,EAAiBtQ,EAAQ,QACzBuQ,EAAcvQ,EAAQ,QACtBwQ,EAAexQ,EAAQ,QACvByQ,EAAazQ,EAAQ,QACrB0Q,EAAW1Q,EAAQ,QACnB2Q,EAAgB3Q,EAAQ,QACxB4Q,EAAU5Q,EAAQ,QAClB6Q,EAAAD,EAAA,YACAE,EAAAF,EAAA,eACAG,EAAAJ,EAAAzO,MAEA8O,EAAA,CACAC,aAAA,EACAC,qBAAA,EACAC,cAAA,EACAC,gBAAA,EACAC,aAAA,EACAC,eAAA,EACAC,cAAA,EACAC,sBAAA,EACAC,UAAA,EACAC,mBAAA,EACAC,gBAAA,EACAC,iBAAA,EACAC,mBAAA,EACAC,WAAA,EACAC,eAAA,EACAC,cAAA,EACAC,UAAA,EACAC,kBAAA,EACAC,QAAA,EACAC,aAAA,EACAC,eAAA,EACAC,eAAA,EACAC,gBAAA,EACAC,cAAA,EACAC,eAAA,EACAC,kBAAA,EACAC,kBAAA,EACAC,gBAAA,EACAC,kBAAA,EACAC,eAAA,EACAC,WAAA,GAGAC,EAAAzC,EAAAS,GAAAvO,EAAA,EAAoDA,EAAAuQ,EAAAjQ,OAAwBN,IAAA,CAC5E,IAIAwQ,EAJAlG,EAAAiG,EAAAvQ,GACAyQ,EAAAlC,EAAAjE,GACAoG,EAAA1C,EAAA1D,GACAqG,EAAAD,KAAAtG,UAEA,GAAAuG,IACAA,EAAAvC,IAAAH,EAAA0C,EAAAvC,EAAAE,GACAqC,EAAAtC,IAAAJ,EAAA0C,EAAAtC,EAAA/D,GACA4D,EAAA5D,GAAAgE,EACAmC,GAAA,IAAAD,KAAA3C,EAAA8C,EAAAH,IAAAzC,EAAA4C,EAAAH,EAAA3C,EAAA2C,IAAA,uCCvDA,IAAA1F,EAAA,WAA0B,IAAAC,EAAAlM,KAAamM,EAAAD,EAAAE,eAA0BC,EAAAH,EAAAI,MAAAD,IAAAF,EAAwB,OAAAE,EAAA,OAAiBE,YAAA,iCAA4C,CAAAF,EAAA,OAAYE,YAAA,wBAAmC,CAAAF,EAAA,MAAAH,EAAAO,GAAA,0BAAAP,EAAAW,GAAAX,EAAAnH,SAAAC,SAAA,IAAAkH,EAAAW,GAAAX,EAAApH,WAAA,SAAAuH,EAAA,OAAsHE,YAAA,gEAA2E,CAAAF,EAAA,OAAYE,YAAA,iCAA4C,CAAAF,EAAA,OAAYE,YAAA,0BAAqC,CAAAF,EAAA,OAAYE,YAAA,uBAAkC,CAAAL,EAAAO,GAAA,aAAAP,EAAAW,GAAAX,EAAAnH,SAAAoC,OAAAkF,EAAA,OAA2DE,YAAA,wBAAmC,CAAAL,EAAAnH,SAAAgN,SAAA,EAAA1F,EAAA,QAAAH,EAAAO,GAAA,uCAAAJ,EAAA,QAAkGG,MAAA,CAAOwF,SAAA,2BAAAC,MAAA,qBAAkE,CAAA/F,EAAAO,GAAA,MAAAP,EAAAW,GAAAX,EAAAgG,GAAA,WAAAhG,CAAA,IAAAA,EAAAnH,SAAAgN,SAAA,kBAAA1F,EAAA,QAAAH,EAAAO,GAAA,iBAAAJ,EAAA,OAAAA,EAAA,OAA+IE,YAAA,gBAAAC,MAAA,CAAmCM,QAAA,MAAAC,EAAA,MAAAC,EAAA,MAAAC,QAAA,cAAAC,YAAA,aAAoF,CAAAb,EAAA,UAAeG,MAAA,CAAOW,GAAA,OAAAC,GAAA,KAAAC,EAAA,SAAiChB,EAAA,QAAaG,MAAA,CAAOjN,EAAA,oaAAka8M,EAAA,OAAgBE,YAAA,wBAAmC,CAAAF,EAAA,MAAAH,EAAAO,GAAAP,EAAAW,GAAAX,EAAAnH,SAAAoN,gBAAA,OAAAjG,EAAAW,GAAAX,EAAApH,gBAAAuH,EAAA,OAAoGE,YAAA,gCAA2C,CAAAF,EAAA,KAAAA,EAAA,QAAAH,EAAAO,GAAA,iBAAAP,EAAAW,GAAAX,EAAAnH,SAAAqF,eAAA,UAAAiC,EAAA,OAAsGE,YAAA,0BAAqC,CAAAF,EAAA,MAAAH,EAAAO,GAAAP,EAAAW,GAAAX,EAAAnH,SAAAU,SAAA,qBAAA4G,EAAA,KAAAH,EAAAO,GAAA,KAAAP,EAAAW,GAAAX,EAAAnH,SAAAqN,UAAA,yBACt2DzD,EAAA,wBC2CAxK,EAAA,IAAAkO,EAAAzP,EAAA,CAAAyB,KAAA,iBAAAC,KAAA,KAAAC,SAAA,UAGA+N,EAAA,CACA9R,KAAA,iBACAmE,MAAA,CACAG,UAAAD,OACAE,SAAA7F,QAEAkG,QANA,WAMA,IAAAC,EAAArF,KACAA,KAAA+E,SAAAO,aACAnB,EAAAoB,IAAAvF,KAAA+E,SAAAO,aAAAE,KAAA,SAAAC,GACAJ,EAAAN,SAAAU,aAIAG,MAAA,CACAC,uBAAA,SAAAC,EAAAC,GAAA,IAAAC,EAAAhG,KACAA,KAAA+E,SAAAO,aACAnB,EAAAoB,IAAAO,GAAAN,KAAA,SAAAC,GACAO,EAAAjB,SAAAU,cAKAQ,QAAA,ICrE4bsM,EAAA,cCO5bzD,EAAgB5P,OAAA6P,EAAA,KAAA7P,CACdqT,EACAtG,EACA0C,GACF,EACA,KACA,KACA,MAIenP,EAAA,KAAAsP,8CClBf,SAAAxP,GAAAZ,EAAAa,EAAAC,EAAA,sBAAAgT,IAAA,IAAAC,EAAA/T,EAAA,QAAAgU,EAAAhU,EAAA,QAAAiU,EAAAjU,EAAA,QAAAkU,EAAAlU,EAAA,QAGO,MAAA8T,EAEP1S,cAAAqJ,GACA,IACA,MAAAhB,EAAA0K,EAAAtR,OAAA4H,GACA,WAAAqJ,EAAArK,GAEA,MAAA2K,GACA,MAAA3K,EAAA4K,EAAAxR,OAAA4H,GACA6J,EAAA7K,EAAAf,iBACAe,EAAAf,UACA,MAAA2B,EAAA,IAAAyJ,EAAArK,GAEA,OADAY,EAAA3B,UAAA9H,EAAA2D,KAAA+P,EAAA3P,MAAA,UACA0F,GAOAjJ,YAAAqI,GACAnI,KAAAmI,KAAAjJ,OAAA+T,OAAA,GAAoC9K,EAAA,CAAS+K,SAAA/K,EAAA+K,UAAA,KAM7C/L,SACA,IAAAnH,KAAAoH,UACA,YAEA,IACA,MAAA6B,EAAgC/J,OAAAuT,EAAA,KAAAvT,CAAU2T,EAAAlS,OAAAX,KAAAmI,OAC1CgL,EAA2BT,EAAA,KAASU,QAAAnK,EAAAjJ,KAAAoH,WACpCiM,EAA2BnU,OAAAyT,EAAA,KAAAzT,CAAkBiU,GAC7C,WAA0BjU,OAAAuT,EAAA,KAAAvT,CAAU+J,EAAAoK,GAAArQ,SAAA,OAEpC,MAAA8P,GACA,aAIAO,aACA,IAAArT,KAAAoH,UACA,YAEA,IACA,MAAA6B,EAAgC/J,OAAAuT,EAAA,KAAAvT,CAAU2T,EAAAlS,OAAAX,KAAAmI,OAC1CgL,EAA2BT,EAAA,KAASU,QAAAnK,EAAAjJ,KAAAoH,WACpC,WAA0BlI,OAAAyT,EAAA,KAAAzT,CAAkBiU,GAAAnQ,SAAA,OAE5C,MAAA8P,GACA,aAIAQ,mBACA,OAAAd,EAAAc,aAAAtT,KAAAmI,KAAAG,SAGAxI,SACA,GAAAE,KAAAoH,UAAA,CACA,MAAAmM,EAAA,KAAAvT,KAAAoH,UAAApE,SAAA,OACA,OAAA+P,EAAApS,OAAAzB,OAAA+T,OAAA,GAAgDjT,KAAAmI,KAAA,CAAcf,UAAAmM,KAE9D,OAAAV,EAAAlS,OAAAX,KAAAmI,QAGA,SAAAqK,GAKA,SAAAc,EAAAhL,GACA,MAAAkL,EAAA,IACAC,EAAA,KACAC,EAAA,KACA,WAAApL,EAAA7G,OACA+R,EAAAC,EAEAnL,EAAA5G,OAAA,CAAAiS,EAAAC,KAQA,OAPAA,EAAArL,GACAoL,GAAAF,EAGAE,GAAAD,EAEAC,GAAAE,EAAAD,EAAA3T,MACA0T,GACSH,GAGT,SAAAK,EAAA5T,GACA,MAAA6T,EAAA,EACAC,EAAA,GACA,IAAAJ,EAAA,EACA,QAAAxS,EAAA,EAAuBA,EAAAlB,EAAAwB,OAAiBN,GAAA,EACxC,OAAAlB,EAAA+T,OAAA7S,EAAA,GACAwS,GAAAG,EAGAH,GAAAI,EAGA,OAAAJ,EAbAnB,EAAAc,gBAvBA,CAsCCd,MAAA,KACD,MAAAK,EAAA,IAA0BD,EAAA,KAAG,CAC7BpS,KAAA,KACAC,KAAA,CACA,CAASD,KAAA,WAAAC,KAAA,IAA6BmS,EAAA,KAAGxQ,YAAA,IACzC,CAAS5B,KAAA,WAAAC,KAAA,IAA6BmS,EAAA,KAAGjP,qBAAA,IACzC,CAASnD,KAAA,aAAAC,KAAA,IAA+BmS,EAAA,KAAGxQ,YAAA,IAC3C,CACA5B,KAAA,UAAAC,KAAA,CACAQ,KAAA,CACA,CAAqBT,KAAA,KAAAC,KAAA,IAAuBmS,EAAA,KAAGlP,sBAAA,KAC/C,CAAqBlD,KAAA,QAAAC,KAAA,IAA0BmS,EAAA,KAAGxQ,YAAA,KAClD,CAAqB5B,KAAA,OAAAC,KAAA,IAAyBmS,EAAA,KAAGxP,aAIjD,CAAS5C,KAAA,eAAAC,KAAA,IAAiCmS,EAAA,KAAGxQ,YAAA,IAC7C,CAAS5B,KAAA,MAAAC,KAAA,IAAwBmS,EAAA,KAAGxQ,YAAA,IACpC,CAAS5B,KAAA,YAAAC,KAAA,IAA8BmS,EAAA,KAAGlP,sBAAA,KAC1C,CAASlD,KAAA,QAAAC,KAAA,IAA0BmS,EAAA,KAAGxQ,YAAA,IACtC,CAAS5B,KAAA,WAAAC,KAAA,IAA6BmS,EAAA,KAAGxR,YAGzC2R,EAAA,IAAkBH,EAAA,KAAG,CACrBpS,KAAA,KACAC,KAAA,IAAAoS,EAAA9S,QAAAU,KAAA,CAA2CD,KAAA,YAAAC,KAAA,IAA8BmS,EAAA,KAAGxP,8ECrI5E,IAAA6Q,EAAUvV,EAAQ,OAARA,EAAsB,GAGhCA,EAAQ,OAARA,CAAwBmG,OAAA,kBAAAqP,GACxBlU,KAAAmU,GAAAtP,OAAAqP,GACAlU,KAAAoU,GAAA,GAEC,WACD,IAEAC,EAFAC,EAAAtU,KAAAmU,GACAI,EAAAvU,KAAAoU,GAEA,OAAAG,GAAAD,EAAA7S,OAAA,CAAiCgH,WAAA+L,EAAAC,MAAA,IACjCJ,EAAAJ,EAAAK,EAAAC,GACAvU,KAAAoU,IAAAC,EAAA5S,OACA,CAAUgH,MAAA4L,EAAAI,MAAA,yCCfK,SAAAC,EAAAC,GACf,GAAA/T,MAAAC,QAAA8T,GAAA,CACA,QAAAxT,EAAA,EAAAyT,EAAA,IAAAhU,MAAA+T,EAAAlT,QAAiDN,EAAAwT,EAAAlT,OAAgBN,IACjEyT,EAAAzT,GAAAwT,EAAAxT,GAGA,OAAAyT,GCNe,SAAAC,EAAAC,GACf,GAAAC,OAAAC,YAAA9V,OAAA4V,IAAA,uBAAA5V,OAAAqM,UAAAvI,SAAAiS,KAAAH,GAAA,OAAAlU,MAAAqC,KAAA6R,GCDe,SAAAI,IACf,UAAAC,UAAA,mDCEe,SAAAC,EAAAT,GACf,OAASD,EAAiBC,IAASE,EAAeF,IAASO,IAJ3DxW,EAAAa,EAAAC,EAAA,sBAAA4V,uCCAe,SAAAC,EAAAV,GACf,GAAA/T,MAAAC,QAAA8T,GAAA,OAAAA,ECDe,SAAAW,EAAAX,EAAAxT,GACf,IAAAoU,EAAA,GACAC,GAAA,EACAC,GAAA,EACAlH,OAAAiG,EAEA,IACA,QAAA3H,EAAAuH,EAAAO,EAAAI,OAAAC,cAA6CQ,GAAA3I,EAAAuH,EAAAsB,QAAAjB,MAA+Be,GAAA,EAG5E,GAFAD,EAAAI,KAAA9I,EAAApE,OAEAtH,GAAAoU,EAAA9T,SAAAN,EAAA,MAEG,MAAAwI,GACH8L,GAAA,EACAlH,EAAA5E,EACG,QACH,IACA6L,GAAA,MAAApB,EAAA,WAAAA,EAAA,YACK,QACL,GAAAqB,EAAA,MAAAlH,GAIA,OAAAgH,ECvBe,SAAAK,IACf,UAAAT,UAAA,wDCEe,SAAAU,EAAAlB,EAAAxT,GACf,OAASkU,EAAcV,IAASW,EAAoBX,EAAAxT,IAAYyU,IAJhElX,EAAAa,EAAAC,EAAA,sBAAAqW,0BCAA,IAAAC,GAAC,SAAAC,GACD,aAkDA,IAAAC,EACAC,EAAA,6CAEAC,EAAA3L,KAAA4L,KACAC,EAAA7L,KAAA8L,MAEAC,EAAA,qBACAC,EAAAD,EAAA,yDAEAE,EAAA,KACAC,EAAA,GACAC,EAAA,iBAEAC,EAAA,2DACAC,EAAA,IAKAC,EAAA,IAMA,SAAAC,EAAAC,GACA,IAAAzM,EAAA0M,EAAAC,EACAC,EAAAlB,EAAAzK,UAAA,CAAiC4L,YAAAnB,EAAAhT,SAAA,KAAAoU,QAAA,MACjCC,EAAA,IAAArB,EAAA,GAUAsB,EAAA,GAaAC,EAAA,EAMAC,GAAA,EAIAC,EAAA,GAMAC,GAAA,IAKAC,EAAA,IAGAC,GAAA,EAkBAC,EAAA,EAIAC,EAAA,EAGAC,EAAA,CACAC,iBAAA,IACAC,eAAA,IACAC,UAAA,EACAC,mBAAA,EACAC,uBAAA,IACAC,kBAAA,GAMAC,EAAA,uCAgBA,SAAAtC,EAAApW,EAAA2Y,GACA,IAAAC,EAAA5E,EAAA6E,EAAA5M,EAAA1K,EAAAuX,EAAAC,EAAA1W,EACA8K,EAAA/M,KAGA,KAAA+M,aAAAiJ,GAKA,WAAAA,EAAApW,EAAA2Y,GAGA,SAAAA,EAAA,CAGA,GAAA3Y,aAAAoW,EAIA,OAHAjJ,EAAA6L,EAAAhZ,EAAAgZ,EACA7L,EAAAlB,EAAAjM,EAAAiM,OACAkB,EAAA6G,GAAAhU,IAAAgU,GAAAhU,EAAAyD,QAAAzD,GAMA,GAFA8Y,EAAA,iBAAA9Y,EAEA8Y,GAAA,EAAA9Y,GAAA,GAMA,GAHAmN,EAAA6L,EAAA,EAAAhZ,EAAA,GAAAA,MAAA,KAGAA,QAAA,CACA,IAAAiM,EAAA,EAAA1K,EAAAvB,EAA8BuB,GAAA,GAASA,GAAA,GAAA0K,KAGvC,OAFAkB,EAAAlB,SACAkB,EAAA6G,EAAA,CAAAhU,IAIAqC,EAAArC,EAAA,OACS,CACT,IAAAqW,EAAA/T,KAAAD,EAAArC,EAAA,WAAAqX,EAAAlK,EAAA9K,EAAAyW,GACA3L,EAAA6L,EAAA,IAAA3W,EAAA4W,WAAA,IAAA5W,IAAAoB,MAAA,UAIAwI,EAAA5J,EAAA6W,QAAA,WAAA7W,IAAA8W,QAAA,UAGA5X,EAAAc,EAAA+W,OAAA,UAGAnN,EAAA,IAAAA,EAAA1K,GACA0K,IAAA5J,EAAAoB,MAAAlC,EAAA,GACAc,IAAAgX,UAAA,EAAA9X,IACS0K,EAAA,IAGTA,EAAA5J,EAAAR,YAGO,CAQP,GALAyX,EAAAX,EAAA,EAAAD,EAAA7W,OAAA,QACAQ,EAAArC,EAAA,GAIA,IAAA2Y,EAEA,OADAxL,EAAA,IAAAiJ,EAAApW,aAAAoW,EAAApW,EAAAqC,GACAkX,EAAApM,EAAAuK,EAAAvK,EAAAlB,EAAA,EAAA0L,GAKA,GAFAmB,EAAA,iBAAA9Y,EAEA8Y,EAAA,CAGA,KAAA9Y,GAAA,SAAAqX,EAAAlK,EAAA9K,EAAAyW,EAAAH,GAKA,GAHAxL,EAAA6L,EAAA,EAAAhZ,EAAA,GAAAqC,IAAAoB,MAAA,SAGA2S,EAAAoD,OAAAnX,EAAA8W,QAAA,gBAAAtX,OAAA,GACA,MAAAwC,MACAsS,EAAA3W,GAIA8Y,GAAA,OAEA3L,EAAA6L,EAAA,KAAA3W,EAAA4W,WAAA,IAAA5W,IAAAoB,MAAA,SAQA,IALAmV,EAAAF,EAAAjV,MAAA,EAAAkV,GACA1M,EAAA1K,EAAA,EAIAwX,EAAA1W,EAAAR,OAA8BN,EAAAwX,EAASxX,IACvC,GAAAqX,EAAAM,QAAAlF,EAAA3R,EAAAoX,OAAAlY,IAAA,GACA,QAAAyS,GAGA,GAAAzS,EAAA0K,EAAA,CACAA,EAAA8M,EACA,eAEa,IAAAF,IAGbxW,KAAAqX,gBAAArX,IAAAsX,gBACAtX,KAAAsX,gBAAAtX,IAAAqX,gBAAA,CACAb,GAAA,EACAtX,GAAA,EACA0K,EAAA,EACA,SAIA,OAAAoL,EAAAlK,EAAAnN,EAAA,GAAA8Y,EAAAH,GAIAtW,EAAA+U,EAAA/U,EAAAsW,EAAA,GAAAxL,EAAA6L,IAGA/M,EAAA5J,EAAA6W,QAAA,SAAA7W,IAAA8W,QAAA,QACAlN,EAAA5J,EAAAR,OAIA,IAAAN,EAAA,EAAiB,KAAAc,EAAA4W,WAAA1X,GAA0BA,KAG3C,IAAAwX,EAAA1W,EAAAR,OAA4B,KAAAQ,EAAA4W,aAAAF,KAI5B,GAFA1W,IAAAoB,MAAAlC,IAAAwX,GAEA1W,EAAA,CAIA,GAHA0W,GAAAxX,EAGAuX,GAAA1C,EAAAoD,OACAT,EAAA,KAAA/Y,EAAA8W,GAAA9W,IAAAwW,EAAAxW,IACA,MAAAqE,MACAsS,EAAAxJ,EAAA6L,EAAAhZ,GAMA,GAHAiM,IAAA1K,EAAA,EAGA0K,EAAA8L,EAGA5K,EAAA6G,EAAA7G,EAAAlB,EAAA,UAGS,GAAAA,EAAA6L,EAGT3K,EAAA6G,EAAA,CAAA7G,EAAAlB,EAAA,OACS,CAWT,GAVAkB,EAAAlB,IACAkB,EAAA6G,EAAA,GAMAzS,GAAA0K,EAAA,GAAA4K,EACA5K,EAAA,IAAA1K,GAAAsV,GAEAtV,EAAAwX,EAAA,CAGA,IAFAxX,GAAA4L,EAAA6G,EAAA+B,MAAA1T,EAAAoB,MAAA,EAAAlC,IAEAwX,GAAAlC,EAAiCtV,EAAAwX,GACjC5L,EAAA6G,EAAA+B,MAAA1T,EAAAoB,MAAAlC,KAAAsV,IAGAxU,IAAAoB,MAAAlC,GACAA,EAAAsV,EAAAxU,EAAAR,YAEAN,GAAAwX,EAGA,KAAgBxX,IAAKc,GAAA,KACrB8K,EAAA6G,EAAA+B,MAAA1T,SAKA8K,EAAA6G,EAAA,CAAA7G,EAAAlB,EAAA,GA8xBA,SAAA2N,EAAA5Z,EAAAuB,EAAAsY,EAAAtS,GACA,IAAAuS,EAAA7N,EAAA8N,EAAAhB,EAAA1W,EAKA,GAHA,MAAAwX,IAAAlC,EACA2B,EAAAO,EAAA,MAEA7Z,EAAAgU,EAAA,OAAAhU,EAAAoD,WAKA,GAHA0W,EAAA9Z,EAAAgU,EAAA,GACA+F,EAAA/Z,EAAAiM,EAEA,MAAA1K,EACAc,EAAA2X,EAAAha,EAAAgU,GACA3R,EAAA,GAAAkF,GAAA,GAAAA,GAAAwS,GAAAnC,EACAqC,EAAA5X,EAAA0X,GACAG,EAAA7X,EAAA0X,EAAA,UAeA,GAbA/Z,EAAAuZ,EAAA,IAAAnD,EAAApW,GAAAuB,EAAAsY,GAGA5N,EAAAjM,EAAAiM,EAEA5J,EAAA2X,EAAAha,EAAAgU,GACA+E,EAAA1W,EAAAR,OAOA,GAAA0F,GAAA,GAAAA,IAAAhG,GAAA0K,MAAA2L,GAAA,CAGA,KAAgBmB,EAAAxX,EAASc,GAAA,IAAA0W,KACzB1W,EAAA4X,EAAA5X,EAAA4J,QAQA,GAJA1K,GAAAwY,EACA1X,EAAA6X,EAAA7X,EAAA4J,EAAA,KAGAA,EAAA,EAAA8M,GACA,KAAAxX,EAAA,MAAAc,GAAA,IAAyCd,IAAKc,GAAA,WAG9C,GADAd,GAAA0K,EAAA8M,EACAxX,EAAA,EAEA,IADA0K,EAAA,GAAA8M,IAAA1W,GAAA,KACoBd,IAAKc,GAAA,KAMzB,OAAArC,EAAAgZ,EAAA,GAAAc,EAAA,IAAAzX,IAKA,SAAA8X,EAAAC,EAAAxQ,GACA,IAAAyQ,EAAAra,EACAuB,EAAA,EAKA,IAHAN,EAAAmZ,EAAA,MAAAA,IAAA,IACAC,EAAA,IAAAjE,EAAAgE,EAAA,MAEY7Y,EAAA6Y,EAAAvY,QAAmB,CAI/B,GAHA7B,EAAA,IAAAoW,EAAAgE,EAAA7Y,KAGAvB,EAAAgZ,EAAA,CACAqB,EAAAra,EACA,MACS4J,EAAAyL,KAAAgF,EAAAra,KACTqa,EAAAra,GAIA,OAAAqa,EAQA,SAAAC,EAAAta,EAAAgU,EAAA/H,GAKA,IAJA,IAAA1K,EAAA,EACAgZ,EAAAvG,EAAAnS,QAGYmS,IAAAuG,GAASvG,EAAAwG,OAGrB,IAAAD,EAAAvG,EAAA,GAAoBuG,GAAA,GAASA,GAAA,GAAAhZ,KAkB7B,OAfA0K,EAAA1K,EAAA0K,EAAA4K,EAAA,GAAAkB,EAGA/X,EAAAgU,EAAAhU,EAAAiM,EAAA,KAGOA,EAAA6L,EAGP9X,EAAAgU,EAAA,CAAAhU,EAAAiM,EAAA,IAEAjM,EAAAiM,IACAjM,EAAAgU,KAGAhU,EAyDA,SAAAuZ,EAAApM,EAAAsN,EAAAZ,EAAApM,GACA,IAAA9N,EAAA4B,EAAAgZ,EAAApZ,EAAAnB,EAAA0a,EAAAC,EACAC,EAAAzN,EAAA6G,EACA6G,EAAA9D,EAGA,GAAA6D,EAAA,CAQAE,EAAA,CAGA,IAAAnb,EAAA,EAAAwB,EAAAyZ,EAAA,GAAgCzZ,GAAA,GAASA,GAAA,GAAAxB,KAIzC,GAHA4B,EAAAkZ,EAAA9a,EAGA4B,EAAA,EACAA,GAAAsV,EACA0D,EAAAE,EACAza,EAAA4a,EAAAF,EAAA,GAGAC,EAAA3a,EAAA6a,EAAAlb,EAAA4a,EAAA,aAIA,GAFAG,EAAApE,GAAA/U,EAAA,GAAAsV,GAEA6D,GAAAE,EAAA/Y,OAAA,CAEA,IAAA4L,EASA,MAAAqN,EANA,KAAsBF,EAAA/Y,QAAA6Y,EAAiBE,EAAA7E,KAAA,IACvC/V,EAAA2a,EAAA,EACAhb,EAAA,EACA4B,GAAAsV,EACA0D,EAAAhZ,EAAAsV,EAAA,MAIa,CAIb,IAHA7W,EAAAmB,EAAAyZ,EAAAF,GAGA/a,EAAA,EAAyBwB,GAAA,GAASA,GAAA,GAAAxB,KAGlC4B,GAAAsV,EAIA0D,EAAAhZ,EAAAsV,EAAAlX,EAGAgb,EAAAJ,EAAA,IAAAva,EAAA6a,EAAAlb,EAAA4a,EAAA,QAmBA,GAfA9M,KAAAgN,EAAA,GAKA,MAAAG,EAAAF,EAAA,KAAAH,EAAA,EAAAva,IAAA6a,EAAAlb,EAAA4a,EAAA,IAEA9M,EAAAoM,EAAA,GACAc,GAAAlN,KAAA,GAAAoM,OAAA1M,EAAA6L,EAAA,QACA2B,EAAA,MAAAA,IAAA,GAAAd,GAAApM,GAAA,GAAAoM,IAGAtY,EAAA,EAAAgZ,EAAA,EAAAva,EAAA6a,EAAAlb,EAAA4a,GAAA,EAAAK,EAAAF,EAAA,UACAb,IAAA1M,EAAA6L,EAAA,QAEAyB,EAAA,IAAAG,EAAA,GAiBA,OAhBAA,EAAA/Y,OAAA,EAEA4L,GAGAgN,GAAAtN,EAAAlB,EAAA,EAGA2O,EAAA,GAAAC,GAAAhE,EAAA4D,EAAA5D,MACA1J,EAAAlB,GAAAwO,GAAA,GAIAG,EAAA,GAAAzN,EAAAlB,EAAA,EAGAkB,EAkBA,GAdA,GAAA5L,GACAqZ,EAAA/Y,OAAA6Y,EACAvZ,EAAA,EACAuZ,MAEAE,EAAA/Y,OAAA6Y,EAAA,EACAvZ,EAAA0Z,EAAAhE,EAAAtV,GAIAqZ,EAAAF,GAAAH,EAAA,EAAA/D,EAAAxW,EAAA6a,EAAAlb,EAAA4a,GAAAM,EAAAN,IAAApZ,EAAA,GAIAsM,EAEA,OAAoB,CAGpB,MAAAiN,EAAA,CAGA,IAAAnZ,EAAA,EAAAgZ,EAAAK,EAAA,GAAsCL,GAAA,GAASA,GAAA,GAAAhZ,KAE/C,IADAgZ,EAAAK,EAAA,IAAAzZ,EACAA,EAAA,EAA2BoZ,GAAA,GAASA,GAAA,GAAApZ,KAGpCI,GAAAJ,IACAgM,EAAAlB,IACA2O,EAAA,IAAAhE,IAAAgE,EAAA,OAGA,MAGA,GADAA,EAAAF,IAAAvZ,EACAyZ,EAAAF,IAAA9D,EAAA,MACAgE,EAAAF,KAAA,EACAvZ,EAAA,EAMA,IAAAI,EAAAqZ,EAAA/Y,OAA6B,IAAA+Y,IAAArZ,GAAeqZ,EAAAJ,QAI5CrN,EAAAlB,EAAA8L,EACA5K,EAAA6G,EAAA7G,EAAAlB,EAAA,KAGSkB,EAAAlB,EAAA6L,IACT3K,EAAA6G,EAAA,CAAA7G,EAAAlB,EAAA,IAIA,OAAAkB,EA+oCA,OAxuEAiJ,EAAAc,QAEAd,EAAA2E,SAAA,EACA3E,EAAA4E,WAAA,EACA5E,EAAA6E,WAAA,EACA7E,EAAA8E,YAAA,EACA9E,EAAA+E,cAAA,EACA/E,EAAAgF,gBAAA,EACAhF,EAAAiF,gBAAA,EACAjF,EAAAkF,gBAAA,EACAlF,EAAAmF,iBAAA,EACAnF,EAAAoF,OAAA,EAmCApF,EAAAqF,OAAArF,EAAAsF,IAAA,SAAAhb,GACA,IAAAsB,EAAAkC,EAEA,SAAAxD,EAAA,CAEA,oBAAAA,EA0HA,MAAA2D,MACAqS,EAAA,oBAAAhW,GArFA,GAlCAA,EAAAib,eAAA3Z,EAAA,oBACAkC,EAAAxD,EAAAsB,GACAsX,EAAApV,EAAA,EAAA+S,EAAAjV,GACA0V,EAAAxT,GAKAxD,EAAAib,eAAA3Z,EAAA,mBACAkC,EAAAxD,EAAAsB,GACAsX,EAAApV,EAAA,IAAAlC,GACA2V,EAAAzT,GAOAxD,EAAAib,eAAA3Z,EAAA,oBACAkC,EAAAxD,EAAAsB,GACAf,EAAAiD,IACAoV,EAAApV,EAAA,IAAA+S,EAAA,EAAAjV,GACAsX,EAAApV,EAAA,KAAA+S,EAAAjV,GACA4V,EAAA1T,EAAA,GACA2T,EAAA3T,EAAA,KAEAoV,EAAApV,GAAA+S,IAAAjV,GACA4V,IAAAC,EAAA3T,EAAA,GAAAA,OAOAxD,EAAAib,eAAA3Z,EAAA,SAEA,GADAkC,EAAAxD,EAAAsB,GACAf,EAAAiD,GACAoV,EAAApV,EAAA,IAAA+S,GAAA,EAAAjV,GACAsX,EAAApV,EAAA,KAAA+S,EAAAjV,GACA8V,EAAA5T,EAAA,GACA6T,EAAA7T,EAAA,OACa,CAEb,GADAoV,EAAApV,GAAA+S,IAAAjV,IACAkC,EAGA,MAAAG,MACAqS,EAAA1U,EAAA,oBAAAkC,GAHA4T,IAAAC,EAAA7T,EAAA,GAAAA,KAWA,GAAAxD,EAAAib,eAAA3Z,EAAA,WAEA,GADAkC,EAAAxD,EAAAsB,GACAkC,QAcA,MAAAG,MACAqS,EAAA1U,EAAA,uBAAAkC,GAdA,GAAAA,EAAA,CACA,uBAAA0X,kBACAA,OAAAC,kBAAAD,OAAAE,YAIA,MADA9D,GAAA9T,EACAG,MACAqS,EAAA,sBAJAsB,EAAA9T,OAOA8T,EAAA9T,EA0BA,GAhBAxD,EAAAib,eAAA3Z,EAAA,iBACAkC,EAAAxD,EAAAsB,GACAsX,EAAApV,EAAA,IAAAlC,GACAiW,EAAA/T,GAKAxD,EAAAib,eAAA3Z,EAAA,mBACAkC,EAAAxD,EAAAsB,GACAsX,EAAApV,EAAA,EAAA+S,EAAAjV,GACAkW,EAAAhU,GAKAxD,EAAAib,eAAA3Z,EAAA,WAEA,GADAkC,EAAAxD,EAAAsB,GACA,iBAAAkC,EACA,MAAAG,MACAqS,EAAA1U,EAAA,mBAAAkC,GAFAiU,EAAAjU,EAOA,GAAAxD,EAAAib,eAAA3Z,EAAA,aAIA,GAHAkC,EAAAxD,EAAAsB,GAGA,iBAAAkC,GAAA,iBAAA5B,KAAA4B,GAGA,MAAAG,MACAqS,EAAA1U,EAAA,aAAAkC,GAHAwU,EAAAxU,GAeA,OACAwT,iBACAC,gBACAoE,eAAA,CAAAnE,EAAAC,GACAmE,MAAA,CAAAlE,EAAAC,GACAC,SACAC,cACAC,gBACAC,SACAO,aAUAtC,EAAA6F,YAAA,SAAA/X,GACA,OAAAA,aAAAkS,GAAAlS,IAAA,IAAAA,EAAAgY,eAAA,GASA9F,EAAA+F,QAAA/F,EAAAgG,IAAA,WACA,OAAAjC,EAAAkC,UAAA/E,EAAAgF,KASAlG,EAAAmG,QAAAnG,EAAAoG,IAAA,WACA,OAAArC,EAAAkC,UAAA/E,EAAAmF,KAcArG,EAAAsG,OAAA,WACA,IAAAC,EAAA,iBAMAC,EAAAjS,KAAA+R,SAAAC,EAAA,QACA,WAAsB,OAAAnG,EAAA7L,KAAA+R,SAAAC,IACtB,WAAsB,2BAAAhS,KAAA+R,SAAA,IACtB,QAAA/R,KAAA+R,SAAA,IAEA,gBAAAG,GACA,IAAA7Z,EAAA2V,EAAA1M,EAAA9K,EAAA+C,EACA3C,EAAA,EACAyS,EAAA,GACA8I,EAAA,IAAA1G,EAAAqB,GAOA,GALA,MAAAoF,IAAAnF,EACA4B,EAAAuD,EAAA,EAAA5F,GAEA9V,EAAAmV,EAAAuG,EAAAhG,GAEAmB,EAGA,GAAA4D,OAAAC,gBAAA,CAIA,IAFA7Y,EAAA4Y,OAAAC,gBAAA,IAAAkB,YAAA5b,GAAA,IAEkBI,EAAAJ,GAQlB+C,EAAA,OAAAlB,EAAAzB,IAAAyB,EAAAzB,EAAA,SAMA2C,GAAA,MACAyU,EAAAiD,OAAAC,gBAAA,IAAAkB,YAAA,IACA/Z,EAAAzB,GAAAoX,EAAA,GACA3V,EAAAzB,EAAA,GAAAoX,EAAA,KAKA3E,EAAA+B,KAAA7R,EAAA,MACA3C,GAAA,GAGAA,EAAAJ,EAAA,MAGW,KAAAya,OAAAE,YA2BX,MADA9D,GAAA,EACA3T,MACAqS,EAAA,sBAvBA,IAFA1T,EAAA4Y,OAAAE,YAAA3a,GAAA,GAEkBI,EAAAJ,GAMlB+C,EAAA,oBAAAlB,EAAAzB,IAAA,cAAAyB,EAAAzB,EAAA,GACA,WAAAyB,EAAAzB,EAAA,YAAAyB,EAAAzB,EAAA,IACAyB,EAAAzB,EAAA,SAAAyB,EAAAzB,EAAA,OAAAyB,EAAAzB,EAAA,GAEA2C,GAAA,KACA0X,OAAAE,YAAA,GAAAkB,KAAAha,EAAAzB,IAIAyS,EAAA+B,KAAA7R,EAAA,MACA3C,GAAA,GAGAA,EAAAJ,EAAA,EASA,IAAA6W,EAEA,KAAgBzW,EAAAJ,GAChB+C,EAAA0Y,IACA1Y,EAAA,OAAA8P,EAAAzS,KAAA2C,EAAA,MAcA,IAVA/C,EAAA6S,IAAAzS,GACAsb,GAAAhG,EAGA1V,GAAA0b,IACA3Y,EAAA6S,EAAAF,EAAAgG,GACA7I,EAAAzS,GAAAiV,EAAArV,EAAA+C,MAIc,IAAA8P,EAAAzS,GAAYyS,EAAAwG,MAAAjZ,KAG1B,GAAAA,EAAA,EACAyS,EAAA,CAAA/H,EAAA,OACS,CAGT,IAAAA,GAAA,EAAuB,IAAA+H,EAAA,GAAYA,EAAAiJ,OAAA,KAAAhR,GAAA4K,GAGnC,IAAAtV,EAAA,EAAA2C,EAAA8P,EAAA,GAA+B9P,GAAA,GAASA,GAAA,GAAA3C,KAGxCA,EAAAsV,IAAA5K,GAAA4K,EAAAtV,GAKA,OAFAub,EAAA7Q,IACA6Q,EAAA9I,IACA8I,GAjIA,GA0IA1F,EAAA,WACA,IAAA8F,EAAA,aAOA,SAAAC,EAAA9a,EAAA+a,EAAAC,EAAAzE,GAOA,IANA,IAAA2B,EAEA+C,EADAvI,EAAA,IAEAxT,EAAA,EACAwX,EAAA1W,EAAAR,OAEcN,EAAAwX,GAAS,CACvB,IAAAuE,EAAAvI,EAAAlT,OAAiCyb,IAAQvI,EAAAuI,IAAAF,GAIzC,IAFArI,EAAA,IAAA6D,EAAAM,QAAA7W,EAAAoX,OAAAlY,MAEAgZ,EAAA,EAAqBA,EAAAxF,EAAAlT,OAAgB0Y,IAErCxF,EAAAwF,GAAA8C,EAAA,IACA,MAAAtI,EAAAwF,EAAA,KAAAxF,EAAAwF,EAAA,MACAxF,EAAAwF,EAAA,IAAAxF,EAAAwF,GAAA8C,EAAA,EACAtI,EAAAwF,IAAA8C,GAKA,OAAAtI,EAAAwI,UAMA,gBAAAlb,EAAA+a,EAAAC,EAAA1V,EAAA6V,GACA,IAAA5E,EAAAjZ,EAAAsM,EAAA9K,EAAAsM,EAAAN,EAAAyN,EAAAxN,EACA7L,EAAAc,EAAA6W,QAAA,KACA2D,EAAAnF,EACAmC,EAAAlC,EA+BA,IA5BApW,GAAA,IACAJ,EAAA+W,EAGAA,EAAA,EACA7V,IAAA8W,QAAA,QACA/L,EAAA,IAAAgJ,EAAAgH,GACAjQ,EAAAC,EAAAxC,IAAAvI,EAAAR,OAAAN,GACA2W,EAAA/W,EAKAiM,EAAA4G,EAAAmJ,EAAAjD,EAAAF,EAAA7M,EAAA6G,GAAA7G,EAAAlB,EAAA,KACA,GAAAoR,EAAAH,GACA9P,EAAAnB,EAAAmB,EAAA4G,EAAAnS,QAKA+Y,EAAAuC,EAAA9a,EAAA+a,EAAAC,EAAAG,GACA5E,EAAAF,EAAAwE,IACAtE,EAAAsE,EAAAxE,IAGAzM,EAAA9K,EAAAyZ,EAAA/Y,OAGc,GAAA+Y,IAAAzZ,GAAcyZ,EAAAJ,OAG5B,IAAAI,EAAA,UAAAhC,EAAAa,OAAA,GAqCA,GAlCAlY,EAAA,IACA0K,GAEAkB,EAAA6G,EAAA4G,EACAzN,EAAAlB,IAGAkB,EAAA6L,EAAArR,EACAwF,EAAAzC,EAAAyC,EAAAC,EAAAyP,EAAAhD,EAAAwD,GACAzC,EAAAzN,EAAA6G,EACAvG,EAAAN,EAAAM,EACAxB,EAAAkB,EAAAlB,GAMAtM,EAAAsM,EAAA4Q,EAAA,EAGAtb,EAAAqZ,EAAAjb,GAIAwB,EAAAkc,EAAA,EACA5P,KAAA9N,EAAA,SAAAib,EAAAjb,EAAA,GAEA8N,EAAAoM,EAAA,SAAAtY,GAAAkM,KAAA,GAAAoM,OAAA1M,EAAA6L,EAAA,QACAzX,EAAAJ,GAAAI,GAAAJ,IAAA,GAAA0Y,GAAApM,GAAA,GAAAoM,GAAA,EAAAe,EAAAjb,EAAA,IACAka,IAAA1M,EAAA6L,EAAA,QAKArZ,EAAA,IAAAib,EAAA,GAGAvY,EAAAoL,EAAAyM,EAAAtB,EAAAa,OAAA,IAAAoD,EAAAjE,EAAAa,OAAA,IACAb,EAAAa,OAAA,OACS,CAMT,GAHAmB,EAAA/Y,OAAAlC,EAGA8N,EAGA,MAAA4P,IAA2BzC,IAAAjb,GAAA0d,GAC3BzC,EAAAjb,GAAA,EAEAA,MACAsM,EACA2O,EAAA,IAAAxQ,OAAAwQ,IAMA,IAAAzZ,EAAAyZ,EAAA/Y,QAA6B+Y,IAAAzZ,KAG7B,IAAAI,EAAA,EAAAc,EAAA,GAA+Bd,GAAAJ,EAAQkB,GAAAuW,EAAAa,OAAAmB,EAAArZ,OAGvCc,EAAA6X,EAAA7X,EAAA4J,EAAA2M,EAAAa,OAAA,IAIA,OAAApX,GAlJA,GAwJAqI,EAAA,WAGA,SAAA+S,EAAAtQ,EAAAhM,EAAAuc,GACA,IAAArD,EAAAsD,EAAAC,EAAAC,EACAC,EAAA,EACAvc,EAAA4L,EAAAtL,OACAkc,EAAA5c,EAAA6V,EACAgH,EAAA7c,EAAA6V,EAAA,EAEA,IAAA7J,IAAA1J,QAA2BlC,KAC3Bqc,EAAAzQ,EAAA5L,GAAAyV,EACA6G,EAAA1Q,EAAA5L,GAAAyV,EAAA,EACAqD,EAAA2D,EAAAJ,EAAAC,EAAAE,EACAJ,EAAAI,EAAAH,EAAAvD,EAAArD,IAAA8G,EACAA,GAAAH,EAAAD,EAAA,IAAArD,EAAArD,EAAA,GAAAgH,EAAAH,EACA1Q,EAAA5L,GAAAoc,EAAAD,EAKA,OAFAI,IAAA3Q,EAAA,CAAA2Q,GAAA1T,OAAA+C,IAEAA,EAGA,SAAA8Q,EAAAjb,EAAA2V,EAAAuF,EAAAC,GACA,IAAA5c,EAAA6c,EAEA,GAAAF,GAAAC,EACAC,EAAAF,EAAAC,EAAA,UAGA,IAAA5c,EAAA6c,EAAA,EAA2B7c,EAAA2c,EAAQ3c,IAEnC,GAAAyB,EAAAzB,IAAAoX,EAAApX,GAAA,CACA6c,EAAApb,EAAAzB,GAAAoX,EAAApX,GAAA,KACA,MAKA,OAAA6c,EAGA,SAAAC,EAAArb,EAAA2V,EAAAuF,EAAAR,GAIA,IAHA,IAAAnc,EAAA,EAGc2c,KACdlb,EAAAkb,IAAA3c,EACAA,EAAAyB,EAAAkb,GAAAvF,EAAAuF,GAAA,IACAlb,EAAAkb,GAAA3c,EAAAmc,EAAA1a,EAAAkb,GAAAvF,EAAAuF,GAIA,MAAclb,EAAA,IAAAA,EAAAnB,OAAA,EAAuBmB,EAAAia,OAAA,OAIrC,gBAAA9P,EAAAC,EAAAyP,EAAAhD,EAAA6D,GACA,IAAAU,EAAAnS,EAAA1K,EAAA+c,EAAAte,EAAAue,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACAC,EAAAC,EACAlG,EAAA7L,EAAA6L,GAAA5L,EAAA4L,EAAA,KACA4B,EAAAzN,EAAA6G,EACAmL,EAAA/R,EAAA4G,EAGA,IAAA4G,MAAA,KAAAuE,MAAA,GAEA,WAAA/I,EAGAjJ,EAAA6L,GAAA5L,EAAA4L,IAAA4B,GAAAuE,GAAAvE,EAAA,IAAAuE,EAAA,GAAAA,GAGAvE,GAAA,GAAAA,EAAA,KAAAuE,EAAA,EAAAnG,IAAA,EAHAoG,KAoBA,IAbAX,EAAA,IAAArI,EAAA4C,GACA0F,EAAAD,EAAAzK,EAAA,GACA/H,EAAAkB,EAAAlB,EAAAmB,EAAAnB,EACA+M,EAAA6D,EAAA5Q,EAAA,EAEAyR,IACAA,EAAA9G,EACA3K,EAAAoT,EAAAlS,EAAAlB,EAAA4K,GAAAwI,EAAAjS,EAAAnB,EAAA4K,GACAmC,IAAAnC,EAAA,GAKAtV,EAAA,EAAmB4d,EAAA5d,KAAAqZ,EAAArZ,IAAA,GAAuBA,KAI1C,GAFA4d,EAAA5d,IAAAqZ,EAAArZ,IAAA,IAAA0K,IAEA+M,EAAA,EACA0F,EAAA3I,KAAA,GACAuI,GAAA,MACS,CAwBT,IAvBAS,EAAAnE,EAAA/Y,OACAod,EAAAE,EAAAtd,OACAN,EAAA,EACAyX,GAAA,EAIAhZ,EAAAwW,EAAAkH,GAAAyB,EAAA,OAIAnf,EAAA,IACAmf,EAAA1B,EAAA0B,EAAAnf,EAAA0d,GACA9C,EAAA6C,EAAA7C,EAAA5a,EAAA0d,GACAuB,EAAAE,EAAAtd,OACAkd,EAAAnE,EAAA/Y,QAGAid,EAAAG,EACAN,EAAA/D,EAAAnX,MAAA,EAAAwb,GACAL,EAAAD,EAAA9c,OAGgB+c,EAAAK,EAAWN,EAAAC,KAAA,GAC3BM,EAAAC,EAAA1b,QACAyb,EAAA,IAAA9U,OAAA8U,GACAF,EAAAG,EAAA,GACAA,EAAA,IAAAzB,EAAA,GAAAsB,IAIA,GAOA,GANAhf,EAAA,EAGAoe,EAAAH,EAAAkB,EAAAR,EAAAM,EAAAL,GAGAR,EAAA,GAqBA,GAjBAS,EAAAF,EAAA,GACAM,GAAAL,IAAAC,IAAAnB,GAAAiB,EAAA,QAGA3e,EAAAwW,EAAAqI,EAAAG,GAaAhf,EAAA,GAGAA,GAAA0d,IAAA1d,EAAA0d,EAAA,GAGAa,EAAAd,EAAA0B,EAAAnf,EAAA0d,GACAc,EAAAD,EAAA1c,OACA+c,EAAAD,EAAA9c,OAMA,SAAAoc,EAAAM,EAAAI,EAAAH,EAAAI,GACA5e,IAGAqe,EAAAE,EAAAU,EAAAT,EAAAU,EAAAC,EAAAX,EAAAd,GACAc,EAAAD,EAAA1c,OACAuc,EAAA,OAQA,GAAApe,IAGAoe,EAAApe,EAAA,GAIAue,EAAAY,EAAA1b,QACA+a,EAAAD,EAAA1c,OAUA,GAPA2c,EAAAI,IAAAL,EAAA,IAAAnU,OAAAmU,IAGAF,EAAAM,EAAAJ,EAAAK,EAAAlB,GACAkB,EAAAD,EAAA9c,QAGA,GAAAuc,EAMA,MAAAH,EAAAkB,EAAAR,EAAAM,EAAAL,GAAA,EACA5e,IAGAqe,EAAAM,EAAAM,EAAAL,EAAAM,EAAAC,EAAAP,EAAAlB,GACAkB,EAAAD,EAAA9c,YAGa,IAAAuc,IACbpe,IACA2e,EAAA,KAIAD,EAAAnd,KAAAvB,EAGA2e,EAAA,GACAA,EAAAC,KAAAhE,EAAAkE,IAAA,GAEAH,EAAA,CAAA/D,EAAAkE,IACAF,EAAA,UAEWE,IAAAC,GAAA,MAAAJ,EAAA,KAAA3F,KAEXsF,EAAA,MAAAK,EAAA,GAGAD,EAAA,IAAAA,EAAAzB,OAAA,KAGA,GAAAS,GAAA9G,EAAA,CAGA,IAAArV,EAAA,EAAAyX,EAAA0F,EAAA,GAAgC1F,GAAA,GAASA,GAAA,GAAAzX,KAEzCgY,EAAAkF,EAAA5B,GAAA4B,EAAAxS,EAAA1K,EAAA0K,EAAA4K,EAAA,KAAAgD,EAAAyE,QAIAG,EAAAxS,IACAwS,EAAAhR,GAAA6Q,EAGA,OAAAG,GA9PA,GAiYApH,EAAA,WACA,IAAAiI,EAAA,8BACAC,EAAA,cACAC,EAAA,cACAC,EAAA,qBACAC,EAAA,6BAEA,gBAAAvS,EAAA9K,EAAAyW,EAAAH,GACA,IAAA+E,EACA1E,EAAAF,EAAAzW,IAAA8W,QAAAuG,EAAA,IAGA,GAAAD,EAAAnd,KAAA0W,GACA7L,EAAA6L,EAAA2G,MAAA3G,GAAA,KAAAA,EAAA,OACA7L,EAAA6G,EAAA7G,EAAAlB,EAAA,SACS,CACT,IAAA6M,IAGAE,IAAAG,QAAAmG,EAAA,SAAAjF,EAAAuF,EAAAC,GAEA,OADAnC,EAAA,MAAAmC,IAAAlG,eAAA,QAAAkG,EAAA,IACAlH,MAAA+E,EAAArD,EAAAuF,IAGAjH,IACA+E,EAAA/E,EAGAK,IAAAG,QAAAoG,EAAA,MAAApG,QAAAqG,EAAA,SAGAnd,GAAA2W,GAAA,WAAA5C,EAAA4C,EAAA0E,GAKA,GAAAtH,EAAAoD,MACA,MAAAnV,MACAqS,EAAA,SAAAiC,EAAA,SAAAA,EAAA,gBAAAtW,GAIA8K,EAAA6G,EAAA7G,EAAAlB,EAAAkB,EAAA6L,EAAA,OA1CA,GAwNA1B,EAAAwI,cAAAxI,EAAAyI,IAAA,WACA,IAAA5S,EAAA,IAAAiJ,EAAAhW,MAEA,OADA+M,EAAA6L,EAAA,IAAA7L,EAAA6L,EAAA,GACA7L,GAWAmK,EAAA0I,WAAA,SAAA5S,EAAAuL,GACA,OAAAsF,EAAA7d,KAAA,IAAAgW,EAAAhJ,EAAAuL,KAiBArB,EAAA2I,cAAA3I,EAAAuF,GAAA,SAAAA,EAAAhD,GACA,IAAA7F,EAAAhU,EAAAkE,EACAiJ,EAAA/M,KAEA,SAAAyc,EAKA,OAJAvD,EAAAuD,EAAA,EAAA5F,GACA,MAAA4C,IAAAlC,EACA2B,EAAAO,EAAA,KAEAN,EAAA,IAAAnD,EAAAjJ,GAAA0P,EAAA1P,EAAAlB,EAAA,EAAA4N,GAGA,KAAA7F,EAAA7G,EAAA6G,GAAA,YAIA,GAHAhU,IAAAkE,EAAA8P,EAAAnS,OAAA,GAAAwd,EAAAjf,KAAA6L,EAAA4K,MAGA3S,EAAA8P,EAAA9P,GAAA,KAA0BA,EAAA,MAAaA,GAAA,GAAAlE,KAGvC,OAFAA,EAAA,IAAAA,EAAA,GAEAA,GAwBAsX,EAAA4I,UAAA5I,EAAA5M,IAAA,SAAA0C,EAAAuL,GACA,OAAAjO,EAAAtK,KAAA,IAAAgW,EAAAhJ,EAAAuL,GAAAjB,EAAAC,IAQAL,EAAA6I,mBAAA7I,EAAA8I,KAAA,SAAAhT,EAAAuL,GACA,OAAAjO,EAAAtK,KAAA,IAAAgW,EAAAhJ,EAAAuL,GAAA,MAmBArB,EAAA+I,gBAAA/I,EAAA1M,IAAA,SAAA5K,EAAAqa,GACA,IAAAiG,EAAAC,EAAApf,EAAAmd,EAAAkC,EAAAC,EAAAC,EAAAtT,EACAD,EAAA/M,KAKA,GAHAJ,EAAA,IAAAoW,EAAApW,GAGAA,EAAAgU,IAAAhU,EAAA2gB,YACA,MAAAtc,MACAqS,EAAA,4BAAA1W,GASA,GANA,MAAAqa,MAAA,IAAAjE,EAAAiE,IAGAmG,EAAAxgB,EAAAiM,EAAA,IAGAkB,EAAA6G,IAAA7G,EAAA6G,EAAA,OAAA7G,EAAA6G,EAAA,KAAA7G,EAAAlB,GAAA,GAAAkB,EAAA6G,EAAAnS,SAAA7B,EAAAgU,IAAAhU,EAAAgU,EAAA,GAKA,OADA5G,EAAA,IAAAgJ,EAAAzL,KAAAC,KAAAuC,EAAAqK,UAAAgJ,EAAA,EAAAI,EAAA5gB,QACAqa,EAAAjN,EAAAyT,IAAAxG,GAAAjN,EAKA,GAFAqT,EAAAzgB,EAAAgZ,EAAA,EAEAqB,EAAA,CAGA,GAAAA,EAAArG,GAAAqG,EAAArG,EAAA,IAAAqG,EAAArB,EAAA,WAAA5C,EAAAgJ,KAEAmB,GAAAE,GAAAtT,EAAAwT,aAAAtG,EAAAsG,YAEAJ,IAAApT,IAAA0T,IAAAxG,QAIO,IAAAra,EAAAiM,EAAA,IAAAkB,EAAAlB,EAAA,GAAAkB,EAAAlB,GAAA,OAAAkB,EAAAlB,EAEPkB,EAAA6G,EAAA,MAAAwM,GAAArT,EAAA6G,EAAA,SAEA7G,EAAA6G,EAAA,SAAAwM,GAAArT,EAAA6G,EAAA,gBASA,OANA7S,EAAAgM,EAAA6L,EAAA,GAAA4H,EAAA5gB,IAAA,IAGAmN,EAAAlB,GAAA,IAAA9K,EAAA,EAAAA,GAGA,IAAAiV,EAAAqK,EAAA,EAAAtf,KAEO+W,IAKP/W,EAAAmV,EAAA4B,EAAArB,EAAA,IAeA,IAZA2J,GACAF,EAAA,IAAAlK,EAAA,IACAsK,EAAAE,EAAA5gB,IAEA0gB,EAAA1gB,EAAA,EAGAygB,IAAAzgB,EAAAgZ,EAAA,GAEA5L,EAAA,IAAAgJ,EAAAqB,KAGc,CAEd,GAAAiJ,EAAA,CAEA,GADAtT,IAAA0T,MAAA3T,IACAC,EAAA4G,EAAA,MAEA7S,EACAiM,EAAA4G,EAAAnS,OAAAV,IAAAiM,EAAA4G,EAAAnS,OAAAV,GACWof,IACXnT,IAAAyT,IAAAxG,IAIA,GAAAmG,EAAA,CAGA,GAFAxgB,IAAA8gB,MAAAR,GACA/G,EAAAvZ,IAAAiM,EAAA,MACAjM,EAAAgU,EAAA,SACAwM,EAAAxgB,EAAAiM,EAAA,GACAyU,EAAAE,EAAA5gB,OACS,CAET,GADAA,EAAAwW,EAAAxW,EAAA,IACAA,EAAA,MACA0gB,EAAA1gB,EAAA,EAGAmN,IAAA2T,MAAA3T,GAEAhM,EACAgM,EAAA6G,GAAA7G,EAAA6G,EAAAnS,OAAAV,IAAAgM,EAAA6G,EAAAnS,OAAAV,GACSof,IACTpT,IAAA0T,IAAAxG,IAIA,OAAAkG,EAAAnT,GACAqT,IAAArT,EAAAqK,EAAA/M,IAAA0C,IAEAiN,EAAAjN,EAAAyT,IAAAxG,GAAAlZ,EAAAoY,EAAAnM,EAAA8K,EAAAP,EAAA2G,GAAAlR,IAYAkK,EAAAyJ,aAAA,SAAAlH,GACA,IAAA7Z,EAAA,IAAAoW,EAAAhW,MAGA,OAFA,MAAAyZ,IAAAlC,EACA2B,EAAAO,EAAA,KACAN,EAAAvZ,IAAAiM,EAAA,EAAA4N,IAQAvC,EAAA0J,UAAA1J,EAAA2J,GAAA,SAAA7T,EAAAuL,GACA,WAAAsF,EAAA7d,KAAA,IAAAgW,EAAAhJ,EAAAuL,KAOArB,EAAA4J,SAAA,WACA,QAAA9gB,KAAA4T,GAQAsD,EAAA6J,cAAA7J,EAAAmF,GAAA,SAAArP,EAAAuL,GACA,OAAAsF,EAAA7d,KAAA,IAAAgW,EAAAhJ,EAAAuL,IAAA,GAQArB,EAAA8J,uBAAA9J,EAAA+J,IAAA,SAAAjU,EAAAuL,GACA,YAAAA,EAAAsF,EAAA7d,KAAA,IAAAgW,EAAAhJ,EAAAuL,MAAA,IAAAA,GAQArB,EAAAqJ,UAAA,WACA,QAAAvgB,KAAA4T,GAAAqL,EAAAjf,KAAA6L,EAAA4K,GAAAzW,KAAA4T,EAAAnS,OAAA,GAQAyV,EAAAgK,WAAAhK,EAAAgF,GAAA,SAAAlP,EAAAuL,GACA,OAAAsF,EAAA7d,KAAA,IAAAgW,EAAAhJ,EAAAuL,IAAA,GAQArB,EAAAiK,oBAAAjK,EAAAkK,IAAA,SAAApU,EAAAuL,GACA,YAAAA,EAAAsF,EAAA7d,KAAA,IAAAgW,EAAAhJ,EAAAuL,MAAA,IAAAA,GAOArB,EAAAqI,MAAA,WACA,OAAAvf,KAAA4Y,GAOA1B,EAAAmK,WAAA,WACA,OAAArhB,KAAA4Y,EAAA,GAOA1B,EAAAoK,WAAA,WACA,OAAAthB,KAAA4Y,EAAA,GAOA1B,EAAArU,OAAA,WACA,QAAA7C,KAAA4T,GAAA,GAAA5T,KAAA4T,EAAA,IAwBAsD,EAAAqK,MAAA,SAAAvU,EAAAuL,GACA,IAAApX,EAAAgZ,EAAAqH,EAAAC,EACA1U,EAAA/M,KACA4C,EAAAmK,EAAA6L,EAMA,GAJA5L,EAAA,IAAAgJ,EAAAhJ,EAAAuL,GACAA,EAAAvL,EAAA4L,GAGAhW,IAAA2V,EAAA,WAAAvC,EAAAgJ,KAGA,GAAApc,GAAA2V,EAEA,OADAvL,EAAA4L,GAAAL,EACAxL,EAAA2U,KAAA1U,GAGA,IAAA2U,EAAA5U,EAAAlB,EAAA4K,EACAmL,EAAA5U,EAAAnB,EAAA4K,EACA+D,EAAAzN,EAAA6G,EACAmL,EAAA/R,EAAA4G,EAEA,IAAA+N,IAAAC,EAAA,CAGA,IAAApH,IAAAuE,EAAA,OAAAvE,GAAAxN,EAAA4L,GAAAL,EAAAvL,GAAA,IAAAgJ,EAAA+I,EAAAhS,EAAAiS,KAGA,IAAAxE,EAAA,KAAAuE,EAAA,GAGA,OAAAA,EAAA,IAAA/R,EAAA4L,GAAAL,EAAAvL,GAAA,IAAAgJ,EAAAwE,EAAA,GAAAzN,EAGA,GAAAwK,GAAA,KASA,GALAoK,EAAA1C,EAAA0C,GACAC,EAAA3C,EAAA2C,GACApH,IAAAnX,QAGAT,EAAA+e,EAAAC,EAAA,CAaA,KAXAH,EAAA7e,EAAA,IACAA,KACA4e,EAAAhH,IAEAoH,EAAAD,EACAH,EAAAzC,GAGAyC,EAAArE,UAGA5E,EAAA3V,EAAmB2V,IAAKiJ,EAAA7L,KAAA,IACxB6L,EAAArE,eAMA,IAFAhD,GAAAsH,GAAA7e,EAAA4X,EAAA/Y,SAAA8W,EAAAwG,EAAAtd,SAAAmB,EAAA2V,EAEA3V,EAAA2V,EAAA,EAAuBA,EAAA4B,EAAO5B,IAE9B,GAAAiC,EAAAjC,IAAAwG,EAAAxG,GAAA,CACAkJ,EAAAjH,EAAAjC,GAAAwG,EAAAxG,GACA,MAYA,GANAkJ,IAAAD,EAAAhH,IAAAuE,IAAAyC,EAAAxU,EAAA4L,GAAA5L,EAAA4L,GAEAL,GAAA4B,EAAA4E,EAAAtd,SAAAN,EAAAqZ,EAAA/Y,QAIA8W,EAAA,OAAuBA,IAAKiC,EAAArZ,KAAA,GAI5B,IAHAoX,EAAA/B,EAAA,EAGY2D,EAAAvX,GAAO,CAEnB,GAAA4X,IAAAL,GAAA4E,EAAA5E,GAAA,CACA,IAAAhZ,EAAAgZ,EAAqBhZ,IAAAqZ,IAAArZ,GAAeqZ,EAAArZ,GAAAoX,KACpCiC,EAAArZ,GACAqZ,EAAAL,IAAA3D,EAGAgE,EAAAL,IAAA4E,EAAA5E,GAIA,KAAY,GAAAK,EAAA,GAAYA,EAAAqC,OAAA,OAAA+E,GAGxB,OAAApH,EAAA,GAWAN,EAAAlN,EAAAwN,EAAAoH,IAPA5U,EAAA4L,EAAA,GAAArB,GAAA,IACAvK,EAAA4G,EAAA,CAAA5G,EAAAnB,EAAA,GACAmB,IA8BAkK,EAAA2K,OAAA3K,EAAAuJ,IAAA,SAAAzT,EAAAuL,GACA,IAAA8F,EAAAzF,EACA7L,EAAA/M,KAKA,OAHAgN,EAAA,IAAAgJ,EAAAhJ,EAAAuL,IAGAxL,EAAA6G,IAAA5G,EAAA4L,GAAA5L,EAAA4G,IAAA5G,EAAA4G,EAAA,GACA,IAAAoC,EAAAgJ,MAGOhS,EAAA4G,GAAA7G,EAAA6G,IAAA7G,EAAA6G,EAAA,GACP,IAAAoC,EAAAjJ,IAGA,GAAA8K,GAIAe,EAAA5L,EAAA4L,EACA5L,EAAA4L,EAAA,EACAyF,EAAA/T,EAAAyC,EAAAC,EAAA,KACAA,EAAA4L,IACAyF,EAAAzF,MAEAyF,EAAA/T,EAAAyC,EAAAC,EAAA,EAAA6K,GAGA7K,EAAAD,EAAAwU,MAAAlD,EAAAqC,MAAA1T,IAGAA,EAAA4G,EAAA,OAAAiE,IAAA7K,EAAA4L,EAAA7L,EAAA6L,GAEA5L,IAwBAkK,EAAA4K,aAAA5K,EAAAwJ,MAAA,SAAA1T,EAAAuL,GACA,IAAA3E,EAAA/H,EAAA1K,EAAAgZ,EAAApZ,EAAAkZ,EAAA8H,EAAAvE,EAAAC,EAAAuE,EAAAC,EAAAC,EAAAC,EACA7E,EAAA8E,EACArV,EAAA/M,KACAwa,EAAAzN,EAAA6G,EACAmL,GAAA/R,EAAA,IAAAgJ,EAAAhJ,EAAAuL,IAAA3E,EAGA,IAAA4G,IAAAuE,IAAAvE,EAAA,KAAAuE,EAAA,GAmBA,OAhBAhS,EAAA6L,IAAA5L,EAAA4L,GAAA4B,MAAA,KAAAuE,SAAA,KAAAvE,EACAxN,EAAA4G,EAAA5G,EAAAnB,EAAAmB,EAAA4L,EAAA,MAEA5L,EAAA4L,GAAA7L,EAAA6L,EAGA4B,GAAAuE,GAKA/R,EAAA4G,EAAA,IACA5G,EAAAnB,EAAA,GALAmB,EAAA4G,EAAA5G,EAAAnB,EAAA,MASAmB,EAYA,IATAnB,EAAAoT,EAAAlS,EAAAlB,EAAA4K,GAAAwI,EAAAjS,EAAAnB,EAAA4K,GACAzJ,EAAA4L,GAAA7L,EAAA6L,EACAmJ,EAAAvH,EAAA/Y,OACAugB,EAAAjD,EAAAtd,OAGAsgB,EAAAC,IAAAG,EAAA3H,IAAAuE,IAAAoD,EAAAhhB,EAAA4gB,IAAAC,IAAA7gB,GAGAA,EAAA4gB,EAAAC,EAAAG,EAAA,GAAkChhB,IAAKghB,EAAAxM,KAAA,IAKvC,IAHA2H,EAAA9G,EACA4L,EAAAxL,EAEAzV,EAAA6gB,IAAmB7gB,GAAA,GAAU,CAK7B,IAJAyS,EAAA,EACAqO,EAAAlD,EAAA5d,GAAAihB,EACAF,EAAAnD,EAAA5d,GAAAihB,EAAA,EAEArhB,EAAAghB,EAAA5H,EAAAhZ,EAAAJ,EAAgCoZ,EAAAhZ,GAChCqc,EAAAhD,IAAAzZ,GAAAqhB,EACA3E,EAAAjD,EAAAzZ,GAAAqhB,EAAA,EACAnI,EAAAiI,EAAA1E,EAAAC,EAAAwE,EACAzE,EAAAyE,EAAAzE,EAAAvD,EAAAmI,IAAAD,EAAAhI,GAAAvG,EACAA,GAAA4J,EAAAF,EAAA,IAAArD,EAAAmI,EAAA,GAAAF,EAAAzE,EACA0E,EAAAhI,KAAAqD,EAAAF,EAGA6E,EAAAhI,GAAAvG,EASA,OANAA,IACA/H,EAEAsW,EAAAtF,OAAA,KAGA3C,EAAAlN,EAAAmV,EAAAtW,IAQAqL,EAAAmL,QAAA,WACA,IAAAtV,EAAA,IAAAiJ,EAAAhW,MAEA,OADA+M,EAAA6L,GAAA7L,EAAA6L,GAAA,KACA7L,GAwBAmK,EAAAwK,KAAA,SAAA1U,EAAAuL,GACA,IAAAiJ,EACAzU,EAAA/M,KACA4C,EAAAmK,EAAA6L,EAMA,GAJA5L,EAAA,IAAAgJ,EAAAhJ,EAAAuL,GACAA,EAAAvL,EAAA4L,GAGAhW,IAAA2V,EAAA,WAAAvC,EAAAgJ,KAGA,GAAApc,GAAA2V,EAEA,OADAvL,EAAA4L,GAAAL,EACAxL,EAAAwU,MAAAvU,GAGA,IAAA2U,EAAA5U,EAAAlB,EAAA4K,EACAmL,EAAA5U,EAAAnB,EAAA4K,EACA+D,EAAAzN,EAAA6G,EACAmL,EAAA/R,EAAA4G,EAEA,IAAA+N,IAAAC,EAAA,CAGA,IAAApH,IAAAuE,EAAA,WAAA/I,EAAApT,EAAA,GAIA,IAAA4X,EAAA,KAAAuE,EAAA,UAAAA,EAAA,GAAA/R,EAAA,IAAAgJ,EAAAwE,EAAA,GAAAzN,EAAA,EAAAnK,GAQA,GALA+e,EAAA1C,EAAA0C,GACAC,EAAA3C,EAAA2C,GACApH,IAAAnX,QAGAT,EAAA+e,EAAAC,EAAA,CAUA,IATAhf,EAAA,GACAgf,EAAAD,EACAH,EAAAzC,IAEAnc,KACA4e,EAAAhH,GAGAgH,EAAArE,UACcva,IAAK4e,EAAA7L,KAAA,IACnB6L,EAAArE,UAUA,IAPAva,EAAA4X,EAAA/Y,OACA8W,EAAAwG,EAAAtd,OAGAmB,EAAA2V,EAAA,IAAAiJ,EAAAzC,IAAAvE,IAAAgH,EAAAjJ,EAAA3V,GAGAA,EAAA,EAAiB2V,GACjB3V,GAAA4X,IAAAjC,GAAAiC,EAAAjC,GAAAwG,EAAAxG,GAAA3V,GAAA4T,EAAA,EACAgE,EAAAjC,GAAA/B,IAAAgE,EAAAjC,GAAA,EAAAiC,EAAAjC,GAAA/B,EAUA,OAPA5T,IACA4X,EAAA,CAAA5X,GAAAoH,OAAAwQ,KACAoH,GAKA1H,EAAAlN,EAAAwN,EAAAoH,IAmBA1K,EAAAoL,UAAApL,EAAAmD,GAAA,SAAAA,EAAAZ,GACA,IAAA7F,EAAAhU,EAAAkE,EACAiJ,EAAA/M,KAEA,SAAAqa,WAKA,OAJAnB,EAAAmB,EAAA,EAAAxD,GACA,MAAA4C,IAAAlC,EACA2B,EAAAO,EAAA,KAEAN,EAAA,IAAAnD,EAAAjJ,GAAAsN,EAAAZ,GAGA,KAAA7F,EAAA7G,EAAA6G,GAAA,YAIA,GAHA9P,EAAA8P,EAAAnS,OAAA,EACA7B,EAAAkE,EAAA2S,EAAA,EAEA3S,EAAA8P,EAAA9P,GAAA,CAGA,KAAcA,EAAA,MAAaA,GAAA,GAAAlE,KAG3B,IAAAkE,EAAA8P,EAAA,GAAsB9P,GAAA,GAASA,GAAA,GAAAlE,MAK/B,OAFAya,GAAAtN,EAAAlB,EAAA,EAAAjM,MAAAmN,EAAAlB,EAAA,GAEAjM,GAYAsX,EAAAqL,UAAA,SAAAxhB,GAEA,OADAmY,EAAAnY,GAAA2V,KACA1W,KAAA0gB,MAAA,KAAA3f,IAeAmW,EAAAsL,WAAAtL,EAAAuL,KAAA,WACA,IAAAxI,EAAAra,EAAAyN,EAAAqV,EAAAlB,EACAzU,EAAA/M,KACA4T,EAAA7G,EAAA6G,EACAgF,EAAA7L,EAAA6L,EACA/M,EAAAkB,EAAAlB,EACA4Q,EAAAnF,EAAA,EACA4I,EAAA,IAAAlK,EAAA,OAGA,OAAA4C,IAAAhF,MAAA,GACA,WAAAoC,GAAA4C,KAAA,KAAAhF,KAAA,IAAAoL,IAAApL,EAAA7G,EAAA,KA8BA,GA1BA6L,EAAArO,KAAAkY,MAAA1V,GAIA,GAAA6L,MAAA,KACAhZ,EAAAga,EAAAhG,IACAhU,EAAA6B,OAAAoK,GAAA,OAAAjM,GAAA,KACAgZ,EAAArO,KAAAkY,KAAA7iB,GACAiM,EAAAoT,GAAApT,EAAA,OAAAA,EAAA,GAAAA,EAAA,GAEA+M,GAAA,IACAhZ,EAAA,KAAAiM,GAEAjM,EAAAgZ,EAAAiB,gBACAja,IAAAyD,MAAA,EAAAzD,EAAAkZ,QAAA,QAAAjN,GAGAwB,EAAA,IAAA2I,EAAApW,IAEAyN,EAAA,IAAA2I,EAAA4C,EAAA,IAOAvL,EAAAuG,EAAA,GAMA,IALA/H,EAAAwB,EAAAxB,EACA+M,EAAA/M,EAAA4Q,EACA7D,EAAA,IAAAA,EAAA,KAOA,GAHA4I,EAAAnU,EACAA,EAAA6S,EAAAQ,MAAAc,EAAAE,KAAApX,EAAAyC,EAAAyU,EAAA/E,EAAA,KAEA7C,EAAA4H,EAAA5N,GAAAvQ,MAAA,EAAAuV,MAAAhZ,EACAga,EAAAvM,EAAAuG,IAAAvQ,MAAA,EAAAuV,GAAA,CAWA,GANAvL,EAAAxB,OAAA+M,EACAhZ,IAAAyD,MAAAuV,EAAA,EAAAA,EAAA,GAKA,QAAAhZ,IAAA8iB,GAAA,QAAA9iB,GAgBa,EAIbA,OAAAyD,MAAA,SAAAzD,EAAAyZ,OAAA,MAGAF,EAAA9L,IAAAxB,EAAAyL,EAAA,KACA2C,GAAA5M,EAAAqT,MAAArT,GAAAwT,GAAA9T,IAGA,MAvBA,IAAA2V,IACAvJ,EAAAqI,IAAA3V,EAAAyL,EAAA,KAEAkK,EAAAd,MAAAc,GAAAX,GAAA9T,IAAA,CACAM,EAAAmU,EACA,MAIA/E,GAAA,EACA7D,GAAA,EACA8J,EAAA,EAkBA,OAAAvJ,EAAA9L,IAAAxB,EAAAyL,EAAA,EAAAC,EAAA0C,IAaA/C,EAAA2C,cAAA,SAAA4C,EAAAhD,GAKA,OAJA,MAAAgD,IACAvD,EAAAuD,EAAA,EAAA5F,GACA4F,KAEAjD,EAAAxZ,KAAAyc,EAAAhD,EAAA,IAgBAvC,EAAAzM,QAAA,SAAAgS,EAAAhD,GAKA,OAJA,MAAAgD,IACAvD,EAAAuD,EAAA,EAAA5F,GACA4F,IAAAzc,KAAA6L,EAAA,GAEA2N,EAAAxZ,KAAAyc,EAAAhD,IAuBAvC,EAAAyL,SAAA,SAAAlG,EAAAhD,GACA,IAAAxX,EAAAjC,KAAAyK,QAAAgS,EAAAhD,GAEA,GAAAzZ,KAAA4T,EAAA,CACA,IAAAzS,EACAwT,EAAA1S,EAAA2gB,MAAA,KACAC,GAAA9K,EAAAG,UACA4K,GAAA/K,EAAAI,mBACAF,EAAAF,EAAAE,eACA8K,EAAApO,EAAA,GACAqO,EAAArO,EAAA,GACAsO,EAAAjjB,KAAA4Y,EAAA,EACAsK,EAAAD,EAAAF,EAAA1f,MAAA,GAAA0f,EACApK,EAAAuK,EAAAzhB,OAIA,GAFAqhB,IAAA3hB,EAAA0hB,IAAAC,IAAA3hB,EAAAwX,GAAAxX,GAEA0hB,EAAA,GAAAlK,EAAA,GAIA,IAHAxX,EAAAwX,EAAAkK,KACAE,EAAAG,EAAAlP,OAAA,EAAA7S,GAEgBA,EAAAwX,EAASxX,GAAA0hB,EACzBE,GAAA9K,EAAAiL,EAAAlP,OAAA7S,EAAA0hB,GAGAC,EAAA,IAAAC,GAAA9K,EAAAiL,EAAA7f,MAAAlC,IACA8hB,IAAAF,EAAA,IAAAA,GAGA9gB,EAAA+gB,EACAD,EAAAhL,EAAAC,mBAAA8K,GAAA/K,EAAAM,mBACA2K,EAAAjK,QAAA,IAAAoK,OAAA,OAAiDL,EAAA,OAAW,KAC5D,KAAA/K,EAAAK,wBACA4K,GACAD,EAGA,OAAA9gB,GAeAiV,EAAAkM,WAAA,SAAAC,GACA,IAAA1O,EAAApV,EAAA+jB,EAAAC,EAAAC,EAAA3X,EAAA1M,EAAAS,EAAA6jB,EAAAC,EAAArF,EAAAzF,EACA7L,EAAA/M,KACAwa,EAAAzN,EAAA6G,EAEA,SAAAyP,IACAzjB,EAAA,IAAAoW,EAAAqN,IAGAzjB,EAAA2gB,cAAA3gB,EAAAgU,GAAA,IAAAhU,EAAAgZ,IAAAhZ,EAAAsc,GAAA7E,IACA,MAAApT,MACAqS,EAAA,aACA1W,EAAA2gB,YAAA,qCAAA8C,GAIA,IAAA7I,EAAA,OAAAzN,EAAA/J,WAoBA,IAlBAzD,EAAA,IAAAyW,EAAAqB,GACAqM,EAAAJ,EAAA,IAAAtN,EAAAqB,GACAkM,EAAAE,EAAA,IAAAzN,EAAAqB,GACAuB,EAAAgB,EAAAY,GAIA3O,EAAAtM,EAAAsM,EAAA+M,EAAAnX,OAAAsL,EAAAlB,EAAA,EACAtM,EAAAqU,EAAA,GAAA+C,GAAAxX,EAAA0M,EAAA4K,GAAA,EAAAA,EAAAtX,KACAkkB,MAAAzjB,EAAAggB,WAAArgB,GAAA,EAAAsM,EAAA,EAAAtM,EAAAmkB,EAAA9jB,EAEAT,EAAAwY,EACAA,EAAA,IACA/X,EAAA,IAAAoW,EAAA4C,GAGA6K,EAAA7P,EAAA,OAEc,CAGd,GAFAyK,EAAA/T,EAAA1K,EAAAL,EAAA,KACAikB,EAAAF,EAAA5B,KAAArD,EAAAqC,MAAA6C,IACA,GAAAC,EAAA5D,WAAAyD,GAAA,MACAC,EAAAC,EACAA,EAAAC,EACAE,EAAAD,EAAA/B,KAAArD,EAAAqC,MAAA8C,EAAAE,IACAD,EAAAD,EACAjkB,EAAAK,EAAA2hB,MAAAlD,EAAAqC,MAAA8C,EAAAjkB,IACAK,EAAA4jB,EAgBA,OAbAA,EAAAlZ,EAAA+Y,EAAA9B,MAAA+B,GAAAC,EAAA,KACAE,IAAA/B,KAAA8B,EAAA9C,MAAAgD,IACAJ,IAAA5B,KAAA8B,EAAA9C,MAAA6C,IACAE,EAAA7K,EAAA8K,EAAA9K,EAAA7L,EAAA6L,EACA/M,GAAA,EAGA8I,EAAArK,EAAAoZ,EAAAH,EAAA1X,EAAA0L,GAAAgK,MAAAxU,GAAA4S,MAAAC,WACAtV,EAAAmZ,EAAAH,EAAAzX,EAAA0L,GAAAgK,MAAAxU,GAAA4S,OAAA,EACA,CAAA+D,EAAA1gB,WAAAugB,EAAAvgB,YACA,CAAAygB,EAAAzgB,WAAAsgB,EAAAtgB,YAEA2U,EAAAxY,EACAwV,GAOAuC,EAAA/T,SAAA,WACA,OAAAnD,MAeAkX,EAAAyM,YAAA,SAAAtJ,EAAAZ,GAEA,OADA,MAAAY,GAAAnB,EAAAmB,EAAA,EAAAxD,GACA2C,EAAAxZ,KAAAqa,EAAAZ,EAAA,IAeAvC,EAAAlU,SAAA,SAAAuV,GACA,IAAAtW,EACArC,EAAAI,KACA4Y,EAAAhZ,EAAAgZ,EACA/M,EAAAjM,EAAAiM,EA0BA,OAvBA,OAAAA,EAEA+M,GACA3W,EAAA,WACA2W,EAAA,IAAA3W,EAAA,IAAAA,IAEAA,EAAA,OAGAA,EAAA2X,EAAAha,EAAAgU,GAEA,MAAA2E,EACAtW,EAAA4J,GAAA2L,GAAA3L,GAAA4L,EACAoC,EAAA5X,EAAA4J,GACAiO,EAAA7X,EAAA4J,EAAA,MAEAqN,EAAAX,EAAA,EAAAD,EAAA7W,OAAA,QACAQ,EAAA+U,EAAA8C,EAAA7X,EAAA4J,EAAA,QAAA0M,EAAAK,GAAA,IAGAA,EAAA,GAAAhZ,EAAAgU,EAAA,KAAA3R,EAAA,IAAAA,IAGAA,GAQAiV,EAAAE,QAAAF,EAAA0M,OAAA,WACA,IAAA3hB,EACArC,EAAAI,KACA6L,EAAAjM,EAAAiM,EAEA,cAAAA,EAAAjM,EAAAoD,YAEAf,EAAA2X,EAAAha,EAAAgU,GAEA3R,EAAA4J,GAAA2L,GAAA3L,GAAA4L,EACAoC,EAAA5X,EAAA4J,GACAiO,EAAA7X,EAAA4J,EAAA,KAEAjM,EAAAgZ,EAAA,MAAA3W,MAIAiV,EAAA4E,cAAA,EAEA,MAAA/E,GAAAf,EAAAsF,IAAAvE,GAEAf,EAOA,SAAAiJ,EAAArf,GACA,IAAAuB,EAAA,EAAAvB,EACA,OAAAA,EAAA,GAAAA,IAAAuB,MAAA,EAKA,SAAAyY,EAAAhX,GAMA,IALA,IAAAgW,EAAAiL,EACA1iB,EAAA,EACAgZ,EAAAvX,EAAAnB,OACA4L,EAAAzK,EAAA,MAEUzB,EAAAgZ,GAAO,CAGjB,IAFAvB,EAAAhW,EAAAzB,KAAA,GACA0iB,EAAApN,EAAAmC,EAAAnX,OACYoiB,IAAKjL,EAAA,IAAAA,GACjBvL,GAAAuL,EAIA,IAAAuB,EAAA9M,EAAA5L,OAAsB,KAAA4L,EAAAwL,aAAAsB,KACtB,OAAA9M,EAAAhK,MAAA,EAAA8W,EAAA,MAKA,SAAA0D,EAAA9Q,EAAAC,GACA,IAAApK,EAAA2V,EACAiC,EAAAzN,EAAA6G,EACAmL,EAAA/R,EAAA4G,EACAzS,EAAA4L,EAAA6L,EACAuB,EAAAnN,EAAA4L,EACA7X,EAAAgM,EAAAlB,EACAiY,EAAA9W,EAAAnB,EAGA,IAAA1K,IAAAgZ,EAAA,YAMA,GAJAvX,EAAA4X,MAAA,GACAjC,EAAAwG,MAAA,GAGAnc,GAAA2V,EAAA,OAAA3V,EAAA2V,EAAA,GAAA4B,EAAAhZ,EAGA,GAAAA,GAAAgZ,EAAA,OAAAhZ,EAMA,GAJAyB,EAAAzB,EAAA,EACAoX,EAAAxX,GAAA+iB,GAGAtJ,IAAAuE,EAAA,OAAAxG,EAAA,GAAAiC,EAAA5X,EAAA,KAGA,IAAA2V,EAAA,OAAAxX,EAAA+iB,EAAAlhB,EAAA,KAKA,IAHAuX,GAAApZ,EAAAyZ,EAAA/Y,SAAAqiB,EAAA/E,EAAAtd,QAAAV,EAAA+iB,EAGA3iB,EAAA,EAAeA,EAAAgZ,EAAOhZ,IAAA,GAAAqZ,EAAArZ,IAAA4d,EAAA5d,GAAA,OAAAqZ,EAAArZ,GAAA4d,EAAA5d,GAAAyB,EAAA,KAGtB,OAAA7B,GAAA+iB,EAAA,EAAA/iB,EAAA+iB,EAAAlhB,EAAA,KAOA,SAAAsW,EAAAtZ,EAAAwc,EAAAJ,EAAAxb,GACA,GAAAZ,EAAAwc,GAAAxc,EAAAoc,GAAApc,OAAA,EAAAsW,EAAAtW,GAAAwW,EAAAxW,IACA,MAAAqE,MACAqS,GAAA9V,GAAA,8BAAAZ,EACAA,EAAAwc,GAAAxc,EAAAoc,EAAA,sCACA,6BAAApc,GAKA,SAAAiB,EAAAP,GACA,wBAAApB,OAAAqM,UAAAvI,SAAAiS,KAAA3U,GAKA,SAAAkgB,EAAA5gB,GACA,IAAAmB,EAAAnB,EAAAgU,EAAAnS,OAAA,EACA,OAAAwd,EAAArf,EAAAiM,EAAA4K,IAAA1V,GAAAnB,EAAAgU,EAAA7S,GAAA,KAIA,SAAA8Y,EAAA5X,EAAA4J,GACA,OAAA5J,EAAAR,OAAA,EAAAQ,EAAAoX,OAAA,OAAApX,EAAAoB,MAAA,GAAApB,IACA4J,EAAA,YAAAA,EAIA,SAAAiO,EAAA7X,EAAA4J,EAAAgY,GACA,IAAAlL,EAAAoL,EAGA,GAAAlY,EAAA,GAGA,IAAAkY,EAAAF,EAAA,MAAwBhY,EAAKkY,GAAAF,GAC7B5hB,EAAA8hB,EAAA9hB,OAOA,GAHA0W,EAAA1W,EAAAR,SAGAoK,EAAA8M,EAAA,CACA,IAAAoL,EAAAF,EAAAhY,GAAA8M,IAA8B9M,EAAKkY,GAAAF,GACnC5hB,GAAA8hB,OACOlY,EAAA8M,IACP1W,IAAAoB,MAAA,EAAAwI,GAAA,IAAA5J,EAAAoB,MAAAwI,IAIA,OAAA5J,EAOA+T,EAAAc,IACAd,EAAA,WAAAA,cAIIF,EAAA,WAAoB,OAAAE,GAAoBf,KAAAnW,EAAAJ,EAAAI,EAAAD,QAAA2V,IAAAsB,IAAAjX,EAAAC,QAAAgX,IA/uF3C,sCCAD,IAAA7J,EAAA,WAA0B,IAAAC,EAAAlM,KAAamM,EAAAD,EAAAE,eAA0BC,EAAAH,EAAAI,MAAAD,IAAAF,EAAwB,OAAAE,EAAA,OAAiBE,YAAA,mBAA8B,CAAAL,EAAAlH,QAA0qDqH,EAAA,kBAAwGG,MAAA,CAAOzH,SAAAmH,EAAAnH,SAAAD,UAAAoH,EAAApH,aAAzxDuH,EAAA,OAA2BE,YAAA,iCAA4C,CAAAF,EAAA,OAAYE,YAAA,yIAAoJ,CAAAF,EAAA,OAAYE,YAAA,iCAA4C,CAAAF,EAAA,OAAYE,YAAA,0BAAqC,CAAAF,EAAA,OAAYE,YAAA,uBAAkC,CAAAF,EAAA,KAAAH,EAAAO,GAAA,aAAAP,EAAAW,GAAAX,EAAAnH,SAAAoC,SAAAkF,EAAA,OAAqEE,YAAA,wBAAmC,CAAAF,EAAA,KAAAA,EAAA,QAAAH,EAAAO,GAAA,6BAAAJ,EAAA,QAAoEG,MAAA,CAAOwF,SAAA,2BAAAC,MAAA,qBAAkE,CAAA/F,EAAAO,GAAA,MAAAP,EAAAW,GAAAX,EAAAgG,GAAA,WAAAhG,CAAA,IAAAA,EAAAnH,SAAAgN,SAAA,wBAAA1F,EAAA,OAAAA,EAAA,OAAkHE,YAAA,gBAAAC,MAAA,CAAmCM,QAAA,MAAAC,EAAA,MAAAC,EAAA,MAAAC,QAAA,cAAAC,YAAA,aAAoF,CAAAb,EAAA,UAAeG,MAAA,CAAOW,GAAA,OAAAC,GAAA,KAAAC,EAAA,SAAiChB,EAAA,QAAaG,MAAA,CAAOjN,EAAA,oaAAka8M,EAAA,OAAgBE,YAAA,0BAAqC,CAAAF,EAAA,MAAAH,EAAAO,GAAAP,EAAAW,GAAAX,EAAAnH,SAAAU,SAAA,qBAAA4G,EAAA,KAAAH,EAAAO,GAAA,KAAAP,EAAAW,GAAAX,EAAAnH,SAAAqN,UAAA,oBAAA/F,EAAA,OAAwJE,YAAA,qBAAgC,CAAAL,EAAAoB,GAAA,GAAAjB,EAAA,KAAAA,EAAA,UAAiCE,YAAA,cAAAC,MAAA,CAAiC4B,SAAAlC,EAAAjH,YAA0B8I,GAAA,CAAKM,MAAAnC,EAAAhG,QAAmB,CAAAgG,EAAAO,GAAAP,EAAAW,GAAAX,EAAAjH,WAAA,cAAAiH,EAAAhH,QAAA,qBAAkK,IACp9DyJ,EAAA,YAAoC,IAAAzC,EAAAlM,KAAamM,EAAAD,EAAAE,eAA0BC,EAAAH,EAAAI,MAAAD,IAAAF,EAAwB,OAAAE,EAAA,OAAiBE,YAAA,+BAA0C,CAAAF,EAAA,KAAAA,EAAA,QAAAH,EAAAO,GAAA,iECDyRuX,EAAAC,EAAA,iBCOvbnV,EAAgB5P,OAAA6P,EAAA,KAAA7P,CACd8kB,EACA/X,EACA0C,GACF,EACA,KACA,KACA,MAIenP,EAAA,KAAAsP,8CClBf,SAAAxP,GACAJ,OAAAglB,eAAAplB,EAAA,cAA8C2J,OAAA,IAC9C,IAAA0b,EAASzlB,EAAQ,QAOjB,SAAAiC,EAAAqN,GACA,GAAApN,MAAAC,QAAAmN,GAAA,CAEA,IADA,IAAAoW,EAAA,GACAjjB,EAAA,EAAuBA,EAAA6M,EAAAvM,OAAkBN,IACzCijB,EAAAzO,KAAAhV,EAAAqN,EAAA7M,KAEA,IAAAf,EAAAd,EAAA0K,OAAAoa,GACA,OAAA9kB,EAAA0K,OAAA,CAAAqa,EAAAjkB,EAAAqB,OAAA,KAAArB,IAGA,IAAAkkB,EAAAC,EAAAvW,GACA,WAAAsW,EAAA7iB,QAAA6iB,EAAA,OACAA,EACAhlB,EAAA0K,OAAA,CAAAqa,EAAAC,EAAA7iB,OAAA,KAAA6iB,IASA,SAAAE,EAAA1gB,EAAAwZ,GACA,UAAAxZ,EAAAT,MAAA,KACA,UAAAY,MAAA,4BAEA,OAAAwgB,SAAA3gB,EAAAwZ,GAEA,SAAA+G,EAAA1L,EAAA+L,GACA,GAAA/L,EAAA,GACA,OAAArZ,EAAA2D,KAAA,CAAA0V,EAAA+L,IAGA,IAAAC,EAAAC,EAAAjM,GACAkM,EAAAF,EAAAljB,OAAA,EACAqjB,EAAAF,EAAAF,EAAA,GAAAG,GACA,OAAAvlB,EAAA2D,KAAA6hB,EAAAH,EAAA,OAGA,SAAApjB,EAAAyM,EAAA+W,GAEA,QADA,IAAAA,IAA4BA,GAAA,IAC5B/W,GAAA,IAAAA,EAAAvM,OACA,OAAAnC,EAAA2D,KAAA,IAEA,IAAA+hB,EAAAT,EAAAvW,GACAiX,EAAAC,EAAAF,GACA,GAAAD,EACA,OAAAE,EAEA,OAAAA,EAAAE,UAAA1jB,OACA,UAAAwC,MAAA,qBAEA,OAAAghB,EAAAhlB,KAQA,SAAAmlB,EAAApX,GACA,IAAAA,GAAA,IAAAA,EAAAvM,OACA,OAAAnC,EAAA2D,KAAA,IAEA,IAAA+hB,EAAAT,EAAAvW,GACA8W,EAAAE,EAAA,GACA,GAAAF,GAAA,IACA,OAAAE,EAAAvjB,OAEA,GAAAqjB,GAAA,IACA,OAAAA,EAAA,IAEA,GAAAA,GAAA,IACA,OAAAA,EAAA,IAEA,GAAAA,GAAA,IAEA,OAAAA,EAAA,IAIA,IAAAO,EAAAP,EAAA,IACArjB,EAAA+iB,EAAAQ,EAAA3hB,MAAA,EAAAgiB,GAAAriB,SAAA,WACA,OAAAqiB,EAAA5jB,EAKA,SAAAyjB,EAAAlX,GACA,IAAAvM,EAAA4jB,EAAAplB,EAAAqlB,EAAA/lB,EACA0lB,EAAA,GACAH,EAAA9W,EAAA,GACA,GAAA8W,GAAA,IAEA,OACA7kB,KAAA+N,EAAA3K,MAAA,KACA8hB,UAAAnX,EAAA3K,MAAA,IAGA,GAAAyhB,GAAA,KAWA,GARArjB,EAAAqjB,EAAA,IAGA7kB,EADA,MAAA6kB,EACAxlB,EAAA2D,KAAA,IAGA+K,EAAA3K,MAAA,EAAA5B,GAEA,IAAAA,GAAAxB,EAAA,OACA,UAAAgE,MAAA,gDAEA,OACAhE,OACAklB,UAAAnX,EAAA3K,MAAA5B,IAGA,GAAAqjB,GAAA,KAIA,GAHAO,EAAAP,EAAA,IACArjB,EAAA+iB,EAAAxW,EAAA3K,MAAA,EAAAgiB,GAAAriB,SAAA,WACA/C,EAAA+N,EAAA3K,MAAAgiB,EAAA5jB,EAAA4jB,GACAplB,EAAAwB,SACA,UAAAwC,MAAA,eAEA,OACAhE,OACAklB,UAAAnX,EAAA3K,MAAA5B,EAAA4jB,IAGA,GAAAP,GAAA,KAEArjB,EAAAqjB,EAAA,IACAQ,EAAAtX,EAAA3K,MAAA,EAAA5B,GACA,MAAA6jB,EAAA7jB,OACAlC,EAAA2lB,EAAAI,GACAL,EAAAtP,KAAApW,EAAAU,MACAqlB,EAAA/lB,EAAA4lB,UAEA,OACAllB,KAAAglB,EACAE,UAAAnX,EAAA3K,MAAA5B,IAKA4jB,EAAAP,EAAA,IACArjB,EAAA+iB,EAAAxW,EAAA3K,MAAA,EAAAgiB,GAAAriB,SAAA,WACA,IAAAuiB,EAAAF,EAAA5jB,EACA,GAAA8jB,EAAAvX,EAAAvM,OACA,UAAAwC,MAAA,qDAGA,GADAqhB,EAAAtX,EAAA3K,MAAAgiB,EAAAE,GACA,IAAAD,EAAA7jB,OACA,UAAAwC,MAAA,0CAEA,MAAAqhB,EAAA7jB,OACAlC,EAAA2lB,EAAAI,GACAL,EAAAtP,KAAApW,EAAAU,MACAqlB,EAAA/lB,EAAA4lB,UAEA,OACAllB,KAAAglB,EACAE,UAAAnX,EAAA3K,MAAAkiB,IAKA,SAAAC,EAAAvjB,GACA,aAAAA,EAAAoB,MAAA,KAGA,SAAAoiB,EAAAxjB,GACA,wBAAAA,EACAA,EAEAujB,EAAAvjB,KAAAoB,MAAA,GAAApB,EAGA,SAAA2iB,EAAAc,GACA,GAAAA,EAAA,EACA,UAAAzhB,MAAA,kDAEA,IAAAlB,EAAA2iB,EAAA1iB,SAAA,IACA,OAAAD,EAAAtB,OAAA,MAAAsB,IAGA,SAAA4iB,EAAA/iB,GACA,OAAAA,EAAAnB,OAAA,MAAAmB,IAGA,SAAAgjB,EAAAF,GACA,IAAA3iB,EAAA6hB,EAAAc,GACA,OAAApmB,EAAA2D,KAAAF,EAAA,OAGA,SAAAwhB,EAAAzgB,GACA,IAAAxE,EAAA+B,SAAAyC,GAAA,CACA,qBAAAA,EACA,OAAA0hB,EAAA1hB,GACAxE,EAAA2D,KAAA0iB,EAAAF,EAAA3hB,IAAA,OAGAxE,EAAA2D,KAAAa,GAGA,qBAAAA,EACA,OAAAA,EAIA8hB,EAAA9hB,GAHAxE,EAAA2D,KAAA,IAMA,UAAAa,QAAA0Q,IAAA1Q,EACA,OAAAxE,EAAA2D,KAAA,IAEA,GAAAa,aAAA+hB,WACA,OAAAvmB,EAAA2D,KAAAa,GAEA,GAAAqgB,EAAA2B,KAAAhiB,GAEA,OAAAxE,EAAA2D,KAAAa,EAAAiiB,WAGA,UAAA9hB,MAAA,gBAGA,OAAAH,EApNAhF,EAAA6B,SAsCA7B,EAAAyC,SAgCAzC,EAAAsmB,gEC/FA,IAAAY,EAAgBtnB,EAAQ,QACxBunB,EAAcvnB,EAAQ,QAGtBG,EAAAC,QAAA,SAAAonB,GACA,gBAAAC,EAAAC,GACA,IAGAxjB,EAAA2V,EAHAK,EAAA/T,OAAAohB,EAAAE,IACAhlB,EAAA6kB,EAAAI,GACAtC,EAAAlL,EAAAnX,OAEA,OAAAN,EAAA,GAAAA,GAAA2iB,EAAAoC,EAAA,QAAA1R,GACA5R,EAAAgW,EAAAC,WAAA1X,GACAyB,EAAA,OAAAA,EAAA,OAAAzB,EAAA,IAAA2iB,IAAAvL,EAAAK,EAAAC,WAAA1X,EAAA,WAAAoX,EAAA,MACA2N,EAAAtN,EAAAS,OAAAlY,GAAAyB,EACAsjB,EAAAtN,EAAAvV,MAAAlC,IAAA,GAAAoX,EAAA,OAAA3V,EAAA,2QCiEApD,EAAA,MACAgB,KAAA,QACAgE,WAAA,CACA6hB,UAAAC,EAAA,WACAC,UAAAC,EAAA,KACAC,cAAAC,EAAA,KACAC,UAAAC,EAAA,KACAniB,eAAAoiB,EAAA,MAEA5mB,KATA,WAUA,OACA2K,QAAA,UACAuD,QAAA,GACAvJ,QAAA,GACA4J,UAAAsY,OAAAC,SAAAra,KACAC,YAAA,GACA8B,KAAA,GACAuY,WAAA,EACAC,WAAA,EACAC,eAAA,EACAC,eAAA,EACAriB,UAAA,MACAC,SAAA,KAGAqiB,QAzBA,WAyBA,IAAA/hB,EAAArF,KACAA,KAAA4K,QAAA5K,KAAA6H,QAAA+C,QADA,IAKAxE,EALAihB,EAEArnB,KAAAsG,OAAAC,OAAA+gB,EAFAD,EAEAC,UAAA9gB,EAFA6gB,EAEA7gB,KACAxG,KAAAmK,KAAAnK,KAAA+E,SAAA,KAAAuiB,GAGA,IAAAlhB,EAAAC,KAAAG,GAAAnD,MAAA,GACA,MAAAsG,GAEA,YADAmd,OAAAC,SAAAra,KAAA,SAIA,IAAAyB,EAAAzD,aAAA6c,QAAA,WAAAvd,OAAAhK,KAAA4K,QAAA,KAAAZ,OAAAsd,IACAnZ,GAAAqZ,EAAA,KAAA5Z,UAAAO,KACAnO,KAAAmO,WAEA2Y,OAAAW,SACAznB,KAAAinB,WAAA,EACAjnB,KAAAknB,eAAA,EACAlnB,KAAAmnB,eAAA,GAGAnnB,KAAA0nB,gBAAAliB,KAAA,WACA,IAAA2N,EAAAwU,EAAA,KAAArgB,UAAAsgB,gBAAAtoB,EAAA2D,KAAAmD,EAAA,QACAyhB,EAAA,KAAAF,EAAA,KAAAG,mBAAA3U,GAAAnQ,SAAA,OAEA,GAAAqC,EAAAN,SAAAgjB,aAAAxO,eAAAsO,EAIA,GAAAf,OAAAW,OAAA,CAKA,IAAAO,EAAAP,OAAAQ,OAAA1gB,KAAA,QAGAygB,EACAE,QAAA,CACAC,QAAA,iBACAC,QAAA,CACAxhB,KAAA,OACAyhB,QAAA,kEAGA7iB,KAAA,SAAA8iB,GAIA,OAHAjjB,EAAA8hB,eAAA,EACA9hB,EAAAkjB,WAAAD,EAAAE,MAAAnV,QAEAhO,EAAAojB,gBAAAjjB,KAAA,WACA,OAAAH,EAAAqjB,uBApBArjB,EAAAiJ,sBAJAwY,OAAAC,SAAAra,KAAA,WA6BAzG,QAAA,CACA2H,UADA,WAEA,OAAA4Z,EAAA,KAAA5Z,UAAA5N,KAAAmO,UAEAoa,WAJA,SAIApa,GACAnO,KAAA4E,QAAAuJ,EACAnO,KAAA2M,YAAA3M,KAAA6H,QAAA8gB,eAAA,YAAA3oB,KAAA4E,SAEA0J,eARA,WAQA,IAAAtI,EAAAhG,KACAA,KAAA4N,cACA5N,KAAAknB,eAAA,EACAlnB,KAAAuoB,WAAAvoB,KAAAmO,SAEAnO,KAAAyoB,gBAAAjjB,KAAA,WACA,OAAAQ,EAAA0iB,kBAIAA,YAlBA,WAmBA1oB,KAAAyO,KAAAzO,KAAA+E,SAAA6jB,QAAArP,eAAAvZ,KAAA4E,QAAA2U,cAAA,qBAEAkP,cArBA,WAqBA,IAAAtiB,EAAAnG,KACA6oB,EAAA7oB,KAEA8oB,EAAA,CAAApiB,UAAA,EAAAC,OAAA,EAAAnG,KAAA,MAAAoG,KAAA,YAAApG,KAAA,kBAAAqG,QAAA,EAAArG,KAAA,GAAAoG,KAAA,UAAApG,KAAA,GAAAoG,KAAA,UAAApG,KAAA,GAAAoG,KAAA,YAAApG,KAAA,GAAAoG,KAAA,WAAApG,KAAA,GAAAoG,KAAA,WAAApG,KAAA,GAAAoG,KAAA,WAAApG,KAAA,GAAAoG,KAAA,WAAAE,SAAA,EAAAC,gBAAA,OAAAH,KAAA,YACAmiB,EAAA,CAAAriB,UAAA,EAAAC,OAAA,EAAAnG,KAAA,MAAAoG,KAAA,YAAApG,KAAA,WAAAoG,KAAA,YAAApG,KAAA,eAAAqG,QAAA,EAAArG,KAAA,GAAAoG,KAAA,YAAAE,SAAA,EAAAC,gBAAA,OAAAH,KAAA,YAEA,OAAAoiB,QAAAC,IAAA,CACAjpB,KAAAkpB,WAAAJ,EAAA,CAAA9oB,KAAA+E,SAAAoC,KACAnH,KAAAkpB,WAAAH,EAAA,CAAA/oB,KAAA+E,SAAAoC,GAAA0hB,EAAAjkB,YAEAY,KAAA,SAAA2jB,GAAA,IAAAC,EAAAlqB,OAAAmqB,EAAA,KAAAnqB,CAAAiqB,EAAA,GAAAG,EAAAF,EAAA,GAAAG,EAAAH,EAAA,GACAI,EAAA/E,UAAA,IAAA3b,KAAA,KAEA3C,EAAAgE,KAAA0e,EAAA9jB,SAAA,OAAAukB,EAAA,IACAnjB,EAAAgE,KAAA0e,EAAA9jB,SAAA,SAAAukB,EAAA,IACAnjB,EAAAgE,KAAA0e,EAAA9jB,SAAA,UAAAukB,EAAA,IACAnjB,EAAAgE,KAAA0e,EAAA9jB,SAAA,WAAAukB,EAAA,IACAnjB,EAAAgE,KAAA0e,EAAA9jB,SAAA,WAAAukB,EAAA,IACAnjB,EAAAgE,KAAA0e,EAAA9jB,SAAA,WAAA0f,SAAA6E,EAAA,IAAAE,GACArjB,EAAAgE,KAAA0e,EAAA9jB,SAAA,cACAoB,EAAAgE,KAAA0e,EAAA9jB,SAAA,cAAAukB,EAAA,IACAnjB,EAAAgE,KAAA0e,EAAA9jB,SAAA,cAAA0kB,EAAA7mB,EAAA2mB,EAAA,IAAAjf,IAAAC,KAAAC,IAAA,QAAAC,QAAA,IAEAoe,EAAA/jB,UAAA+jB,EAAAa,sBAAAb,EAAA9jB,SAAA4kB,iBAGAjC,cA/CA,WA+CA,IAAAkC,EAAA5pB,KACA6pB,EAAA,CAAAnjB,UAAA,EAAAC,OAAA,EAAAnG,KAAA,MAAAoG,KAAA,YAAApG,KAAA,oBAAAqG,QAAA,EAAArG,KAAA,GAAAoG,KAAA,YAAApG,KAAA,GAAAoG,KAAA,WAAApG,KAAA,GAAAoG,KAAA,WAAApG,KAAA,GAAAoG,KAAA,YAAApG,KAAA,GAAAoG,KAAA,YAAApG,KAAA,GAAAoG,KAAA,YAAAE,SAAA,EAAAC,gBAAA,OAAAH,KAAA,YAEA,OAAA5G,KAAAkpB,WAAAW,EAAA,CAAA7pB,KAAA+E,SAAAoC,KAAA3B,KAAA,SAAAskB,GAEAF,EAAAzf,KAAAyf,EAAA7kB,SAAA,eAAA+kB,EAAA,IACAF,EAAAzf,KAAAyf,EAAA7kB,SAAA,WAAA0f,SAAAqF,EAAA,KACAF,EAAAzf,KAAAyf,EAAA7kB,SAAA,gBAAA0f,SAAAqF,EAAA,KACAF,EAAAzf,KAAAyf,EAAA7kB,SAAA,qBAAA0kB,EAAA7mB,EAAAknB,EAAA,IAAAxf,IAAAC,KAAAC,IAAA,QAAAC,QAAA,IACAmf,EAAAzf,KAAAyf,EAAA7kB,SAAA,gBAAA0kB,EAAA7mB,EAAAknB,EAAA,IAAAxf,IAAAC,KAAAC,IAAA,QAAAC,QAAA,IACAmf,EAAAzf,KAAAyf,EAAA7kB,SAAA,eAAA+kB,EAAA,OAGAJ,sBA5DA,SA4DAC,GAAA,IAAAI,EAAA/pB,KACA8E,EAAA,MACA,oDAAA6kB,EACA7kB,GAEA5F,OAAA8qB,KAAAhqB,KAAA6H,QAAAoiB,QAAAC,QAAA,SAAA1pB,GACAupB,EAAAliB,QAAAoiB,OAAAzpB,GAAA+Y,eAAAoQ,EAAApQ,gBACAzU,EAAAtE,KAIAsE,IAEAokB,WAzEA,SAyEAiB,EAAAC,GACA,IAAAnrB,EAAA,IAAAorB,EAAA,KAAA5iB,SAAA0iB,GACAlqB,EAAAhB,EAAA0B,OAAA2pB,MAAArrB,EAAAC,OAAAqrB,EAAA,KAAArrB,CAAAkrB,IAEAhC,EAAA,CAAAnoB,OAAAwI,MAAA,OAKA,OAJAzI,KAAA4E,UACAwjB,EAAAoC,OAAAxqB,KAAA4E,SAGAgD,MAAA5H,KAAA6H,QAAAC,YAAA,aAAAkC,OAAAhK,KAAA6H,QAAAW,UAAA,CACAL,KAAAiB,KAAAC,UAAA+e,GACA9e,QAAA,CAAAC,eAAA,oBACAC,OAAA,SAEAhE,KAAA,SAAAiE,GAAA,OAAAA,EAAAzB,SACAxC,KAAA,SAAA2C,GACA,IAAA8c,EAAAoF,EAAA,KAAAI,iBAAAN,EAAAtjB,QAAAsB,EAAAlI,MACA,OAAAglB","file":"js/claim.c8325931.js","sourcesContent":["// most Object methods by ES6 should accept primitives\nvar $export = require('./_export');\nvar core = require('./_core');\nvar fails = require('./_fails');\nmodule.exports = function (KEY, exec) {\n  var fn = (core.Object || {})[KEY] || Object[KEY];\n  var exp = {};\n  exp[KEY] = exec(fn);\n  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);\n};\n","import BigNumber from 'bignumber.js';\nimport * as rlp from 'rlp';\nexport class RLP {\n    constructor(profile) {\n        this.profile = profile;\n    }\n    /**\n     * encode data according to profile\n     * @param data the structured data to be encoded\n     */\n    encode(data) {\n        const packed = pack(data, this.profile, '');\n        return rlp.encode(packed);\n    }\n    /**\n     * decode buffer according to profile\n     * @param buf rlp encoded data\n     */\n    decode(buf) {\n        const packed = rlp.decode(buf);\n        return unpack(packed, this.profile, '');\n    }\n}\n(function (RLP) {\n    /** base class of scalar kind */\n    class ScalarKind {\n    }\n    RLP.ScalarKind = ScalarKind;\n    /** a noop scalar kind */\n    class RawKind extends ScalarKind {\n        data(data, ctx) {\n            return { encode() { return data; } };\n        }\n        buffer(buf, ctx) {\n            return { decode() { return buf; } };\n        }\n    }\n    RLP.RawKind = RawKind;\n    /** a scalar kind to presents number */\n    class NumericKind extends ScalarKind {\n        /**\n         * create a numeric kind\n         * @param maxBytes up limit of data in bytes\n         */\n        constructor(maxBytes) {\n            super();\n            this.maxBytes = maxBytes;\n        }\n        data(data, ctx) {\n            assert(typeof data === 'string' || typeof data === 'number', ctx, 'expected string or number');\n            if (typeof data === 'string') {\n                const isHex = isHexString(data);\n                const isDec = isDecString(data);\n                assert(isHex || isDec, ctx, 'expected non-negative integer in hex or dec string');\n                if (isHex) {\n                    assert(data.length > 2, ctx, 'expected valid hex string');\n                }\n            }\n            else {\n                assert(Number.isSafeInteger(data) && data >= 0, ctx, 'expected non-negative safe integer');\n            }\n            const bn = new BigNumber(data);\n            if (bn.isZero()) {\n                return {\n                    encode() {\n                        return Buffer.alloc(0);\n                    }\n                };\n            }\n            let hex = bn.toString(16);\n            if (hex.length % 2 !== 0) {\n                hex = '0' + hex;\n            }\n            assert(this.maxBytes ? hex.length <= this.maxBytes * 2 : true, ctx, `expected number in ${this.maxBytes} bytes`);\n            return {\n                encode() {\n                    return Buffer.from(hex, 'hex');\n                }\n            };\n        }\n        buffer(buf, ctx) {\n            assert(this.maxBytes ? buf.length <= this.maxBytes : true, ctx, `expected less than ${this.maxBytes} bytes`);\n            assert(buf.length === 0 || buf[0] !== 0, ctx, `expected canonical integer (no leading zero bytes)`);\n            return {\n                decode() {\n                    if (buf.length === 0) {\n                        return 0;\n                    }\n                    const bn = new BigNumber(buf.toString('hex'), 16);\n                    const num = bn.toNumber();\n                    return Number.isSafeInteger(num) ? num : '0x' + bn.toString(16);\n                }\n            };\n        }\n    }\n    RLP.NumericKind = NumericKind;\n    /** a scalar kind to present blob */\n    class BlobKind extends ScalarKind {\n        data(data, ctx) {\n            assert(isHexString(data), ctx, 'expected hex string');\n            assert(data.length % 2 === 0, ctx, 'expected even length hex');\n            return {\n                encode() {\n                    return Buffer.from(data.slice(2), 'hex');\n                }\n            };\n        }\n        buffer(buf, ctx) {\n            return {\n                decode() {\n                    return '0x' + buf.toString('hex');\n                }\n            };\n        }\n    }\n    RLP.BlobKind = BlobKind;\n    /** fixed length blob */\n    class FixedBlobKind extends BlobKind {\n        constructor(bytes) {\n            super();\n            this.bytes = bytes;\n        }\n        data(data, ctx) {\n            const encoder = super.data(data, ctx);\n            assert(data.length === this.bytes * 2 + 2, ctx, `expected hex string presents ${this.bytes} bytes`);\n            return encoder;\n        }\n        buffer(buf, ctx) {\n            const decoder = super.buffer(buf, ctx);\n            assert(buf.length === this.bytes, ctx, `expected ${this.bytes} bytes`);\n            return decoder;\n        }\n    }\n    RLP.FixedBlobKind = FixedBlobKind;\n    /** fixed length blob allowing null */\n    class NullableFixedBlobKind extends FixedBlobKind {\n        data(data, ctx) {\n            if (!data) {\n                return {\n                    encode() {\n                        return Buffer.alloc(0);\n                    }\n                };\n            }\n            return super.data(data, ctx);\n        }\n        buffer(buf, ctx) {\n            if (buf.length === 0) {\n                return { decode() { return null; } };\n            }\n            return super.buffer(buf, ctx);\n        }\n    }\n    RLP.NullableFixedBlobKind = NullableFixedBlobKind;\n    /** fixed length blob kind that will remove leading zero on encoding and pad zero on decoding */\n    class CompactFixedBlobKind extends FixedBlobKind {\n        data(data, ctx) {\n            const buf = super.data(data, ctx).encode();\n            return {\n                encode() {\n                    const nzIndex = buf.findIndex(v => v !== 0);\n                    if (nzIndex >= 0) {\n                        return buf.slice(nzIndex);\n                    }\n                    return Buffer.alloc(0);\n                }\n            };\n        }\n        buffer(buf, ctx) {\n            assert(buf.length <= this.bytes, ctx, `expected less than ${this.bytes} bytes`);\n            assert(buf.length === 0 || buf[0] !== 0, ctx, `expected no leading zero bytes`);\n            const bytes = this.bytes;\n            return {\n                decode() {\n                    const zeros = '0'.repeat((bytes - buf.length) * 2);\n                    return '0x' + zeros + buf.toString('hex');\n                }\n            };\n        }\n    }\n    RLP.CompactFixedBlobKind = CompactFixedBlobKind;\n})(RLP || (RLP = {}));\nfunction pack(obj, profile, ctx) {\n    ctx = ctx ? ctx + '.' + profile.name : profile.name;\n    const kind = profile.kind;\n    if (kind instanceof RLP.ScalarKind) {\n        return kind.data(obj, ctx).encode();\n    }\n    if (Array.isArray(kind)) {\n        return kind.map(k => pack(obj[k.name], k, ctx));\n    }\n    assert(Array.isArray(obj), ctx, 'expected array');\n    const item = kind.item;\n    return obj.map((part, i) => pack(part, { name: '#' + i, kind: item }, ctx));\n}\nfunction unpack(packed, profile, ctx) {\n    ctx = ctx ? ctx + '.' + profile.name : profile.name;\n    const kind = profile.kind;\n    if (kind instanceof RLP.ScalarKind) {\n        if (!(kind instanceof RLP.RawKind)) {\n            assert(Buffer.isBuffer(packed), ctx, 'expected Buffer');\n        }\n        return kind.buffer(packed, ctx).decode();\n    }\n    if (Array.isArray(kind)) {\n        assert(Array.isArray(packed), ctx, 'expected array');\n        const parts = packed;\n        assert(parts.length === kind.length, ctx, `expected ${kind.length} items, but got ${parts.length}`);\n        return kind.reduce((o, p, i) => {\n            o[p.name] = unpack(parts[i], p, ctx);\n            return o;\n        }, {});\n    }\n    assert(Array.isArray(packed), ctx, 'expected array');\n    const item = kind.item;\n    return packed.map((part, i) => unpack(part, { name: '#' + i, kind: item }, ctx));\n}\nfunction assert(cond, ctx, msg) {\n    if (!cond) {\n        throw new RLPError(`${ctx}: ${msg}`);\n    }\n}\nfunction isHexString(str) {\n    return /^0x[0-9a-f]*$/i.test(str);\n}\nfunction isDecString(str) {\n    return /^[0-9]+$/.test(str);\n}\nclass RLPError extends Error {\n    constructor(msg) {\n        super(msg);\n        this.name = RLPError.name;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","<template>\n  <div class=\"container-fluid\">\n\n    <div v-if=\"!claimed\" class=\"container-fluid envelope-wrap\">\n      <div class=\"container-fluid envelope-container envelope-container--claim envelope--verified envelope-container--red envelope-container--with-card\">\n        <div class=\"container-fluid envelope-info\">\n          <div class=\"row envelope-info--top\">\n            <div class=\"col-xs-5 left-align\">\n              <p>Envelope #{{ envelope.id }}</p>\n            </div>\n            <div class=\"col-xs-7 right-align\">\n              <p>\n                <span>Expires\n                  <time datetime=\"2019-03-07T15:19:30.000Z\" title=\"2019-03-07 15:19\">in {{ envelope.duration * 1000 | duration('humanize') }}</time>\n                </span>\n              </p>\n            </div>\n          </div>\n          <div>\n            <svg class=\"svg--icon-dog\" version=\"1.1\" x=\"0px\" y=\"0px\" viewBox=\"0 0 100 100\" xml:space=\"preserve\">\n              <circle cx=\"46.2\" cy=\"35\" r=\"3.7\"></circle>\n              <path d=\"M63.7,31.3c-3.1-8.7-11.4-15-21.2-15l-7.5,0c-6.1,0-11.3,3.6-13.7,8.8c-5.2,2.4-8.8,7.6-8.8,13.7v30H20v15h37.5V61.2l7.5,0  c12.4,0,22.5-10.1,22.5-22.5v-7.5H63.7z M65,53.7h-7.5c-4.1,0-7.5,3.4-7.5,7.5v15H27.5v-7.5c8.3,0,15-6.7,15-15v-7.5  c0-2.1-1.7-3.7-3.8-3.7S35,44.2,35,46.3v7.5c0,4.1-3.4,7.5-7.5,7.5l-7.5,0V38.8c0-4.1,3.4-7.5,7.5-7.5c0-4.1,3.4-7.5,7.5-7.5h7.5  c8.3,0,15,6.7,15,15H65h15C80,47,73.3,53.7,65,53.7z\"></path>\n            </svg>\n          </div>\n          <div class=\"envelope-info--message\">\n            <h2>{{ envelope.message || 'Best wishes 🐶' }}</h2>\n            <p>– {{ envelope.nickname || 'Anonymous' }}</p>\n          </div>\n        </div>\n\n        <div class=\"envelope--buttons\">\n          <div class=\"envelope--input--disclaimer\">\n            <p>\n              <span>Click CLAIM to see how much you received.</span>\n            </p>\n          </div>\n          <p>\n            <button :disabled=\"isClaiming\"  class=\"btn btn-env\" @click=\"claim\">{{ isClaiming ? 'Claiming...' + counter : 'Claim' }}</button>\n          </p>\n        </div>\n\n      </div>\n    </div>\n\n    <AfterClaimCard v-else :envelope=\"envelope\" :tokenName=\"tokenName\" />\n  </div>\n</template>\n\n\n<script>\nimport BN from 'bignumber.js'\nimport IPFS from 'ipfs-mini'\nimport AfterClaimCard from \"@/components/AfterClaimCard.vue\";\nimport { cry, abi, RLP, Transaction } from 'thor-devkit'\n\nconst GAS_PER_CLAIMER = 200000\nconst ipfs = new IPFS({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' })\n\n\nexport default {\n    name: 'ClaimCard',\n    components: {\n      AfterClaimCard,\n    },\n    props: {\n      visitor: String,\n      tokenName: String,\n      envelope: Object\n    },\n    data() {\n      return {\n        claimed: false,\n        isClaiming: false,\n        counter: 20,\n        cTicker: null\n      }\n    },\n    mounted() {\n      if (this.envelope.messageLink) {\n        ipfs.cat(this.envelope.messageLink).then(message => {\n          this.envelope.message = message\n        })\n      }\n    },\n    destroyed() {\n      clearInterval(this.cTicker)\n    },\n    watch: {\n      'envelope.messageLink': function (val, oldVal) {\n        if (this.envelope.messageLink) {\n          ipfs.cat(val).then(message => {\n            this.envelope.message = message\n          })\n        }\n      }\n    },\n    methods: {\n      claim() {\n        this.isClaiming = true\n        let spk = atob(this.$route.params.code)\n        let claimABI = {\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_claimerAddr\",\"type\":\"address\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"claimEnvelope\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}\n\n        let params = [ {\"name\": \"id\", \"type\": \"uint256\"}, {\"name\": \"claimer\", \"type\": \"address\"} ]\n        let text = abi.encodeParameters(params, [this.envelope.id, this.visitor])\n\n        let signature = cry.secp256k1.sign(cry.keccak256(Buffer.from(text.slice(2), 'hex')), Buffer.from(spk.slice(2), 'hex'))\n        let data = (new abi.Function(claimABI)).encode(this.envelope.id, this.visitor, '0x' + signature.toString('hex'))\n\n        this.cTicker = setInterval(this.refreshCounter, 1000)\n\n        fetch(this.$config.providerUrl + '/blocks/best').then(resp => resp.json())\n        .then(block => {\n          let blockRef = block.id.slice(0, 18)\n\n          let body = {\n            chainTag: this.$config.chainTag,\n            blockRef: blockRef,\n            expiration: 360, // expire in 1 hour\n            clauses: [{to: this.$config.contract, value: '0x0', data: data}],\n            gasPriceCoef: 0,\n            gas: GAS_PER_CLAIMER,\n            dependsOn: null,\n            nonce: +new Date()\n          }\n\n          let tx = new Transaction(body)\n          let signingHash = cry.blake2b256(tx.encode())\n          tx.signature = cry.secp256k1.sign(signingHash, Buffer.from(spk.slice(2), 'hex'))\n          let raw = '0x' + tx.encode().toString('hex')\n\n          return fetch(this.$config.providerUrl + '/transactions', {\n            body: JSON.stringify({ raw }),\n            headers: {'content-type': 'application/json'},\n            method: 'POST',\n          })\n          .then(response => response.json())\n          .then(tx => {\n            this.getReceipt(tx.id, (err, receipt) => {\n              if (err) return\n              this.isClaiming = false\n\n              if (receipt.reverted) {\n                //\n                console.error(`claim tx failed: TxId=${tx.id}`)\n              } else {\n                this.claimed = true\n                let events = receipt.outputs[0].events\n                let claimAmount = events[events.length-1].data\n\n                this.$set(this.envelope, 'totalClaimers', this.envelope.totalClaimers + 1)\n                this.$set(this.envelope, 'claimed', (new BN(claimAmount, 16)).div(10**18).toFixed(2))\n\n                // \n                localStorage.setItem(`claimed:${this.$config.network}_${this.envelope.id}`, this.visitor)\n              }\n            })\n          })\n         })\n         .catch(err => {\n           console.error(err)\n           this.isClaiming = false\n         })\n\n      },\n      getReceipt(txID, cb) {\n        let counter = 0\n        let url = this.$config.providerUrl + `/transactions/${txID}/receipt`\n\n        function _getReceipt() {\n          counter++\n\n          fetch(url).then(resp => resp.json())\n          .then(receipt => {\n            console.log(receipt)\n\n            if (receipt) {\n              return cb(null, receipt)\n            }\n            if (counter < 7) {\n              setTimeout(_getReceipt, 10000)\n            } else {\n              return cb(new Error('fail to get receipt'), null)\n            }\n          })\n        }\n       \n       _getReceipt()\n      },\n      refreshCounter() {\n        if (this.counter == 0) {\n          this.counter = 20\n        }\n        this.counter--\n      }\n    }\n}\n</script>\n","var dP = require('./_object-dp').f;\nvar FProto = Function.prototype;\nvar nameRE = /^\\s*function ([^ (]*)/;\nvar NAME = 'name';\n\n// 19.2.4.2 name\nNAME in FProto || require('./_descriptors') && dP(FProto, NAME, {\n  configurable: true,\n  get: function () {\n    try {\n      return ('' + this).match(nameRE)[1];\n    } catch (e) {\n      return '';\n    }\n  }\n});\n","// 19.1.2.14 Object.keys(O)\nvar toObject = require('./_to-object');\nvar $keys = require('./_object-keys');\n\nrequire('./_object-sap')('keys', function () {\n  return function keys(it) {\n    return $keys(toObject(it));\n  };\n});\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"app\"},[_c('header',{staticClass:\"navbar navbar-default\",attrs:{\"id\":\"header\"}},[_c('div',{staticClass:\"container-fluid header\"},[_c('div',{staticClass:\"row\"},[_c('div',{staticClass:\"col-sm-3 col-xs-12 navbar-header header--logo\"},[_c('h3',[_c('router-link',{attrs:{\"to\":{ name: 'home'}}},[_vm._v(\"Lucky Airdrop\")])],1)]),_c('div',{staticClass:\"col-sm-6 hidden-xs header--thor-info\"},[_c('div',{staticClass:\"header--thor-info--wrap\"},[_c('div',{staticClass:\"header--thor-info--wrap text-center\"},[_c('div',[_c('strong',[_vm._v(\"Your Account: \")]),_c('span',[_c('a',{attrs:{\"href\":_vm.accountLink,\"target\":\"_blank\"}},[_vm._v(_vm._s(_vm.visitor))])])]),_vm._v(\" |\\n              \"),_c('div',[_c('strong',[_vm._v(\"Network: \")]),_vm._v(_vm._s(_vm.network))])])])])])])]),_c('div',{staticClass:\"container\"},[(_vm.showInptModal)?_c('div',{staticClass:\"alert envelope--modal\"},[_c('div',{staticClass:\"envelope--modal--container\"},[_c('div',{staticClass:\"envelope--modal--loading\"},[_c('span',{staticClass:\"animated\"},[_c('svg',{staticClass:\"svg--icon-dog\",attrs:{\"version\":\"1.1\",\"x\":\"0px\",\"y\":\"0px\",\"viewBox\":\"0 0 100 100\",\"xml:space\":\"preserve\"}},[_c('circle',{attrs:{\"cx\":\"46.2\",\"cy\":\"35\",\"r\":\"3.7\"}}),_c('path',{attrs:{\"d\":\"M63.7,31.3c-3.1-8.7-11.4-15-21.2-15l-7.5,0c-6.1,0-11.3,3.6-13.7,8.8c-5.2,2.4-8.8,7.6-8.8,13.7v30H20v15h37.5V61.2l7.5,0  c12.4,0,22.5-10.1,22.5-22.5v-7.5H63.7z M65,53.7h-7.5c-4.1,0-7.5,3.4-7.5,7.5v15H27.5v-7.5c8.3,0,15-6.7,15-15v-7.5  c0-2.1-1.7-3.7-3.8-3.7S35,44.2,35,46.3v7.5c0,4.1-3.4,7.5-7.5,7.5l-7.5,0V38.8c0-4.1,3.4-7.5,7.5-7.5c0-4.1,3.4-7.5,7.5-7.5h7.5  c8.3,0,15,6.7,15,15H65h15C80,47,73.3,53.7,65,53.7z\"}})])])]),_c('div',{staticClass:\"envelope--modal--details\"},[_c('div',{staticClass:\"container-fluid\"},[_c('div',{staticClass:\"envelope--field\"},[_c('h3',[_vm._v(\"Input your address\")]),_vm._m(0),_c('div',{staticClass:\"envelope--input\"},[_c('div',{staticClass:\"input-group\"},[_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.address),expression:\"address\"}],class:{'has-error': !_vm.isAddress()},attrs:{\"type\":\"text\",\"placeholder\":\"0x\"},domProps:{\"value\":(_vm.address)},on:{\"input\":function($event){if($event.target.composing){ return; }_vm.address=$event.target.value}}})])])]),_c('div',{staticClass:\"envelope--create-button--close\"},[_c('button',{attrs:{\"disabled\":!_vm.isAddress()},on:{\"click\":_vm.handleContinue}},[_c('h4',[_vm._v(\"Continue\")])])])])])])]):_vm._e(),_c('ShareCard',{attrs:{\"shareLink\":_vm.shareLink}}),(_vm.role=='creator')?_c('RedPacketInfo',{attrs:{\"visitor\":_vm.visitor,\"envelope\":_vm.envelope,\"tokenName\":_vm.tokenName}}):(_vm.role=='claimer' && _vm.envelope.claimed == '0.00' && _vm.envelope.status != '2')?_c('ClaimCard',{attrs:{\"visitor\":_vm.visitor,\"envelope\":_vm.envelope,\"tokenName\":_vm.tokenName}}):(_vm.role=='claimer' && _vm.envelope.claimed != '0.00')?_c('AfterClaimCard',{attrs:{\"envelope\":_vm.envelope,\"tokenName\":_vm.tokenName}}):_c('RedPacketInfo',{attrs:{\"visitor\":_vm.visitor,\"envelope\":_vm.envelope,\"tokenName\":_vm.tokenName}}),_c('CertModal',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.showCertModal),expression:\"showCertModal\"}]})],1)])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('h4',[_c('span',[_vm._v(\"Please input your wallet address to catch your luck.\")]),_c('br')])}]\n\nexport { render, staticRenderFns }","import mod from \"-!../../node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js??ref--12-0!../../node_modules/_thread-loader@2.1.2@thread-loader/dist/cjs.js!../../node_modules/_babel-loader@8.0.5@babel-loader/lib/index.js!../../node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js??ref--0-0!../../node_modules/_vue-loader@15.7.0@vue-loader/lib/index.js??vue-loader-options!./Claim.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js??ref--12-0!../../node_modules/_thread-loader@2.1.2@thread-loader/dist/cjs.js!../../node_modules/_babel-loader@8.0.5@babel-loader/lib/index.js!../../node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js??ref--0-0!../../node_modules/_vue-loader@15.7.0@vue-loader/lib/index.js??vue-loader-options!./Claim.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Claim.vue?vue&type=template&id=42551b7c&\"\nimport script from \"./Claim.vue?vue&type=script&lang=js&\"\nexport * from \"./Claim.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/_vue-loader@15.7.0@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var $iterators = require('./es6.array.iterator');\nvar getKeys = require('./_object-keys');\nvar redefine = require('./_redefine');\nvar global = require('./_global');\nvar hide = require('./_hide');\nvar Iterators = require('./_iterators');\nvar wks = require('./_wks');\nvar ITERATOR = wks('iterator');\nvar TO_STRING_TAG = wks('toStringTag');\nvar ArrayValues = Iterators.Array;\n\nvar DOMIterables = {\n  CSSRuleList: true, // TODO: Not spec compliant, should be false.\n  CSSStyleDeclaration: false,\n  CSSValueList: false,\n  ClientRectList: false,\n  DOMRectList: false,\n  DOMStringList: false,\n  DOMTokenList: true,\n  DataTransferItemList: false,\n  FileList: false,\n  HTMLAllCollection: false,\n  HTMLCollection: false,\n  HTMLFormElement: false,\n  HTMLSelectElement: false,\n  MediaList: true, // TODO: Not spec compliant, should be false.\n  MimeTypeArray: false,\n  NamedNodeMap: false,\n  NodeList: true,\n  PaintRequestList: false,\n  Plugin: false,\n  PluginArray: false,\n  SVGLengthList: false,\n  SVGNumberList: false,\n  SVGPathSegList: false,\n  SVGPointList: false,\n  SVGStringList: false,\n  SVGTransformList: false,\n  SourceBufferList: false,\n  StyleSheetList: true, // TODO: Not spec compliant, should be false.\n  TextTrackCueList: false,\n  TextTrackList: false,\n  TouchList: false\n};\n\nfor (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {\n  var NAME = collections[i];\n  var explicit = DOMIterables[NAME];\n  var Collection = global[NAME];\n  var proto = Collection && Collection.prototype;\n  var key;\n  if (proto) {\n    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);\n    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);\n    Iterators[NAME] = ArrayValues;\n    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);\n  }\n}\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"container-fluid envelope-wrap\"},[_c('div',{staticClass:\"envelope-wrap--title\"},[_c('h2',[_vm._v(\"You’ve already claimed \"+_vm._s(_vm.envelope.claimed)+\" \"+_vm._s(_vm.tokenName)+\".\")])]),_c('div',{staticClass:\"container-fluid envelope-container envelope-container--claim\"},[_c('div',{staticClass:\"container-fluid envelope-info\"},[_c('div',{staticClass:\"row envelope-info--top\"},[_c('div',{staticClass:\"col-xs-5 left-align\"},[_vm._v(\"Envelope #\"+_vm._s(_vm.envelope.id))]),_c('div',{staticClass:\"col-xs-7 right-align\"},[(_vm.envelope.duration > 0)?_c('span',[_vm._v(\"\\n            Expires\\n            \"),_c('time',{attrs:{\"datetime\":\"2019-03-04T15:58:09.000Z\",\"title\":\"2019-03-04 15:58\"}},[_vm._v(\"in \"+_vm._s(_vm._f(\"duration\")(_vm.envelope.duration * 1000,'humanize')))])]):_c('span',[_vm._v(\"Expired\")])])]),_c('div',[_c('svg',{staticClass:\"svg--icon-dog\",attrs:{\"version\":\"1.1\",\"x\":\"0px\",\"y\":\"0px\",\"viewBox\":\"0 0 100 100\",\"xml:space\":\"preserve\"}},[_c('circle',{attrs:{\"cx\":\"46.2\",\"cy\":\"35\",\"r\":\"3.7\"}}),_c('path',{attrs:{\"d\":\"M63.7,31.3c-3.1-8.7-11.4-15-21.2-15l-7.5,0c-6.1,0-11.3,3.6-13.7,8.8c-5.2,2.4-8.8,7.6-8.8,13.7v30H20v15h37.5V61.2l7.5,0  c12.4,0,22.5-10.1,22.5-22.5v-7.5H63.7z M65,53.7h-7.5c-4.1,0-7.5,3.4-7.5,7.5v15H27.5v-7.5c8.3,0,15-6.7,15-15v-7.5  c0-2.1-1.7-3.7-3.8-3.7S35,44.2,35,46.3v7.5c0,4.1-3.4,7.5-7.5,7.5l-7.5,0V38.8c0-4.1,3.4-7.5,7.5-7.5c0-4.1,3.4-7.5,7.5-7.5h7.5  c8.3,0,15,6.7,15,15H65h15C80,47,73.3,53.7,65,53.7z\"}})])]),_c('div',{staticClass:\"envelope-info--price\"},[_c('h2',[_vm._v(_vm._s(_vm.envelope.initialBalance || 0)+\" \"+_vm._s(_vm.tokenName))])]),_c('div',{staticClass:\"envelope-info--claim-details\"},[_c('p',[_c('span',[_vm._v(\"Total claims: \"+_vm._s(_vm.envelope.totalClaimers || 0))])])]),_c('div',{staticClass:\"envelope-info--message\"},[_c('h2',[_vm._v(_vm._s(_vm.envelope.message || 'Best wishes 🐶'))]),_c('p',[_vm._v(\"– \"+_vm._s(_vm.envelope.nickname || 'Anonymous'))])])])])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div class=\"container-fluid envelope-wrap\">\n    <div class=\"envelope-wrap--title\">\n      <h2>You’ve already claimed {{ envelope.claimed }} {{ tokenName }}.</h2>\n    </div>\n    <div class=\"container-fluid envelope-container envelope-container--claim\">\n      <div class=\"container-fluid envelope-info\">\n        <div class=\"row envelope-info--top\">\n          <div class=\"col-xs-5 left-align\">Envelope #{{ envelope.id }}</div>\n          <div class=\"col-xs-7 right-align\">\n            <span v-if=\"envelope.duration > 0\">\n              Expires\n              <time datetime=\"2019-03-04T15:58:09.000Z\" title=\"2019-03-04 15:58\">in {{ envelope.duration * 1000 | duration('humanize') }}</time>\n            </span>\n            <span v-else>Expired</span>\n          </div>\n        </div>\n        <div>\n          <svg class=\"svg--icon-dog\" version=\"1.1\" x=\"0px\" y=\"0px\" viewBox=\"0 0 100 100\" xml:space=\"preserve\">\n            <circle cx=\"46.2\" cy=\"35\" r=\"3.7\"></circle>\n            <path d=\"M63.7,31.3c-3.1-8.7-11.4-15-21.2-15l-7.5,0c-6.1,0-11.3,3.6-13.7,8.8c-5.2,2.4-8.8,7.6-8.8,13.7v30H20v15h37.5V61.2l7.5,0  c12.4,0,22.5-10.1,22.5-22.5v-7.5H63.7z M65,53.7h-7.5c-4.1,0-7.5,3.4-7.5,7.5v15H27.5v-7.5c8.3,0,15-6.7,15-15v-7.5  c0-2.1-1.7-3.7-3.8-3.7S35,44.2,35,46.3v7.5c0,4.1-3.4,7.5-7.5,7.5l-7.5,0V38.8c0-4.1,3.4-7.5,7.5-7.5c0-4.1,3.4-7.5,7.5-7.5h7.5  c8.3,0,15,6.7,15,15H65h15C80,47,73.3,53.7,65,53.7z\"></path>\n          </svg>\n        </div>\n        <div class=\"envelope-info--price\">\n          <h2>{{ envelope.initialBalance || 0 }} {{ tokenName }}</h2>\n        </div>\n        <div class=\"envelope-info--claim-details\">\n          <p>\n            <span>Total claims: {{ envelope.totalClaimers || 0 }}</span>\n          </p>\n        </div>\n        <div class=\"envelope-info--message\">\n          <h2>{{ envelope.message || 'Best wishes 🐶' }}</h2>\n          <p>– {{ envelope.nickname || 'Anonymous' }}</p>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n\n\n<script>\nimport IPFS from 'ipfs-mini'\nconst ipfs = new IPFS({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' })\n\n\nexport default {\n    name: 'AfterClaimCard',\n    props: {\n      tokenName: String,\n      envelope: Object\n    },\n    mounted() {\n      if (this.envelope.messageLink) {\n        ipfs.cat(this.envelope.messageLink).then(message => {\n          this.envelope.message = message\n        })\n      }\n    },\n    watch: {\n      'envelope.messageLink': function (val, oldVal) {\n        if (this.envelope.messageLink) {\n          ipfs.cat(val).then(message => {\n            this.envelope.message = message\n          })\n        }\n      }\n    },\n    methods: {\n    }\n}\n</script>\n\n","import mod from \"-!../../node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js??ref--12-0!../../node_modules/_thread-loader@2.1.2@thread-loader/dist/cjs.js!../../node_modules/_babel-loader@8.0.5@babel-loader/lib/index.js!../../node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js??ref--0-0!../../node_modules/_vue-loader@15.7.0@vue-loader/lib/index.js??vue-loader-options!./AfterClaimCard.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js??ref--12-0!../../node_modules/_thread-loader@2.1.2@thread-loader/dist/cjs.js!../../node_modules/_babel-loader@8.0.5@babel-loader/lib/index.js!../../node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js??ref--0-0!../../node_modules/_vue-loader@15.7.0@vue-loader/lib/index.js??vue-loader-options!./AfterClaimCard.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./AfterClaimCard.vue?vue&type=template&id=60904f9a&\"\nimport script from \"./AfterClaimCard.vue?vue&type=script&lang=js&\"\nexport * from \"./AfterClaimCard.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/_vue-loader@15.7.0@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import { blake2b256, publicKeyToAddress, secp256k1 } from './cry';\nimport { RLP } from './rlp';\n/** Transaction class defines VeChainThor's multi-clause transaction */\nexport class Transaction {\n    /** decode from Buffer to transaction */\n    static decode(raw) {\n        try {\n            const body = unsignedTxRLP.decode(raw);\n            return new Transaction(body);\n        }\n        catch (_a) {\n            const body = txRLP.decode(raw);\n            const sig = body.signature;\n            delete body.signature;\n            const tx = new Transaction(body);\n            tx.signature = Buffer.from(sig.slice(2), 'hex');\n            return tx;\n        }\n    }\n    /**\n     * construct a transaction object with given body\n     * @param body body of tx\n     */\n    constructor(body) {\n        this.body = Object.assign({}, body, { reserved: body.reserved || [] });\n    }\n    /**\n     * returns transaction ID\n     * null returned if something wrong (e.g. invalid signature)\n     */\n    get id() {\n        if (!this.signature) {\n            return null;\n        }\n        try {\n            const signingHash = blake2b256(unsignedTxRLP.encode(this.body));\n            const pubKey = secp256k1.recover(signingHash, this.signature);\n            const signer = publicKeyToAddress(pubKey);\n            return '0x' + blake2b256(signingHash, signer).toString('hex');\n        }\n        catch (_a) {\n            return null;\n        }\n    }\n    /** returns signer. null returned if no signature or not incorrectly signed */\n    get signer() {\n        if (!this.signature) {\n            return null;\n        }\n        try {\n            const signingHash = blake2b256(unsignedTxRLP.encode(this.body));\n            const pubKey = secp256k1.recover(signingHash, this.signature);\n            return '0x' + publicKeyToAddress(pubKey).toString('hex');\n        }\n        catch (_a) {\n            return null;\n        }\n    }\n    /** returns intrinsic gas it takes */\n    get intrinsicGas() {\n        return Transaction.intrinsicGas(this.body.clauses);\n    }\n    /** encode into Buffer */\n    encode() {\n        if (this.signature) {\n            const sigHex = '0x' + this.signature.toString('hex');\n            return txRLP.encode(Object.assign({}, this.body, { signature: sigHex }));\n        }\n        return unsignedTxRLP.encode(this.body);\n    }\n}\n(function (Transaction) {\n    /**\n     * calculates intrinsic gas that a tx costs with the given clauses.\n     * @param clauses\n     */\n    function intrinsicGas(clauses) {\n        const txGas = 5000;\n        const clauseGas = 16000;\n        const clauseGasContractCreation = 48000;\n        if (clauses.length === 0) {\n            return txGas + clauseGas;\n        }\n        return clauses.reduce((sum, c) => {\n            if (c.to) {\n                sum += clauseGas;\n            }\n            else {\n                sum += clauseGasContractCreation;\n            }\n            sum += dataGas(c.data);\n            return sum;\n        }, txGas);\n    }\n    Transaction.intrinsicGas = intrinsicGas;\n    function dataGas(data) {\n        const zgas = 4;\n        const nzgas = 68;\n        let sum = 0;\n        for (let i = 2; i < data.length; i += 2) {\n            if (data.substr(i, 2) === '00') {\n                sum += zgas;\n            }\n            else {\n                sum += nzgas;\n            }\n        }\n        return sum;\n    }\n})(Transaction || (Transaction = {}));\nconst unsignedTxRLP = new RLP({\n    name: 'tx',\n    kind: [\n        { name: 'chainTag', kind: new RLP.NumericKind(1) },\n        { name: 'blockRef', kind: new RLP.CompactFixedBlobKind(8) },\n        { name: 'expiration', kind: new RLP.NumericKind(4) },\n        {\n            name: 'clauses', kind: {\n                item: [\n                    { name: 'to', kind: new RLP.NullableFixedBlobKind(20) },\n                    { name: 'value', kind: new RLP.NumericKind(32) },\n                    { name: 'data', kind: new RLP.BlobKind() },\n                ],\n            },\n        },\n        { name: 'gasPriceCoef', kind: new RLP.NumericKind(1) },\n        { name: 'gas', kind: new RLP.NumericKind(8) },\n        { name: 'dependsOn', kind: new RLP.NullableFixedBlobKind(32) },\n        { name: 'nonce', kind: new RLP.NumericKind(8) },\n        { name: 'reserved', kind: new RLP.RawKind() },\n    ],\n});\nconst txRLP = new RLP({\n    name: 'tx',\n    kind: [...unsignedTxRLP.profile.kind, { name: 'signature', kind: new RLP.BlobKind() }],\n});\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNhY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdHJhbnNhY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxrQkFBa0IsRUFBRSxTQUFTLEVBQUUsTUFBTSxPQUFPLENBQUE7QUFDakUsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLE9BQU8sQ0FBQTtBQUUzQix1RUFBdUU7QUFDdkUsTUFBTTtJQUNGLHdDQUF3QztJQUNqQyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQVc7UUFDNUIsSUFBSTtZQUNBLE1BQU0sSUFBSSxHQUFHLGFBQWEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7WUFDdEMsT0FBTyxJQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQTtTQUMvQjtRQUFDLFdBQU07WUFDSixNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1lBQzlCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxTQUFtQixDQUFBO1lBQ3BDLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQTtZQUVyQixNQUFNLEVBQUUsR0FBRyxJQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQTtZQUNoQyxFQUFFLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQTtZQUMvQyxPQUFPLEVBQUUsQ0FBQTtTQUNaO0lBQ0wsQ0FBQztJQU9EOzs7T0FHRztJQUNILFlBQVksSUFBc0I7UUFDOUIsSUFBSSxDQUFDLElBQUkscUJBQVEsSUFBSSxJQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxJQUFJLEVBQUUsR0FBRSxDQUFBO0lBQzFELENBQUM7SUFFRDs7O09BR0c7SUFDSCxJQUFJLEVBQUU7UUFDRixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtZ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","'use strict';\nvar $at = require('./_string-at')(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\nrequire('./_iter-define')(String, 'String', function (iterated) {\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var index = this._i;\n  var point;\n  if (index >= O.length) return { value: undefined, done: true };\n  point = $at(O, index);\n  this._i += point.length;\n  return { value: point, done: false };\n});\n","export default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}","export default function _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}",";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v7.2.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                    // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        decimalSeparator: '.',\r\n        groupSeparator: ',',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n        fractionGroupSize: 0\r\n      },\r\n\r\n      // The alphabet used for base conversion.\r\n      // It must be at least 2 characters long, with no '.' or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * n {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of n. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(n, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor usage without new.\r\n      if (!(x instanceof BigNumber)) {\r\n\r\n        // Don't throw on constructor call without new (#81).\r\n        // '[BigNumber Error] Constructor call without new: {n}'\r\n        //throw Error(bignumberError + ' Constructor call without new: ' + n);\r\n        return new BigNumber(n, b);\r\n      }\r\n\r\n      if (b == null) {\r\n\r\n        // Duplicate.\r\n        if (n instanceof BigNumber) {\r\n          x.s = n.s;\r\n          x.e = n.e;\r\n          x.c = (n = n.c) ? n.slice() : n;\r\n          return;\r\n        }\r\n\r\n        isNum = typeof n == 'number';\r\n\r\n        if (isNum && n * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / n < 0 ? (n = -n, -1) : 1;\r\n\r\n          // Faster path for integers.\r\n          if (n === ~~n) {\r\n            for (e = 0, i = n; i >= 10; i /= 10, e++);\r\n            x.e = e;\r\n            x.c = [n];\r\n            return;\r\n          }\r\n\r\n          str = n + '';\r\n        } else {\r\n          if (!isNumeric.test(str = n + '')) return parseNumeric(x, str, isNum);\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n        str = n + '';\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10) {\r\n          x = new BigNumber(n instanceof BigNumber ? n : str);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        isNum = typeof n == 'number';\r\n\r\n        if (isNum) {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (n * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / n < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + n);\r\n          }\r\n\r\n          // Prevent later check for length on converted number.\r\n          isNum = false;\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, n + '', isNum, b);\r\n          }\r\n        }\r\n\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      str = str.slice(i, ++len);\r\n\r\n      if (str) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (n > MAX_SAFE_INTEGER || n !== mathfloor(n))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * n));\r\n        }\r\n\r\n        e = e - i - 1;\r\n\r\n         // Overflow?\r\n        if (e > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            str = str.slice(i);\r\n            i = LOG_BASE - str.length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *      decimalSeparator       {string}\r\n     *      groupSeparator         {string}\r\n     *      groupSize              {number}\r\n     *      secondaryGroupSize     {number}\r\n     *      fractionGroupSeparator {string}\r\n     *      fractionGroupSize      {number}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (isArray(v)) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (isArray(v)) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if only one character, or contains '.' or a repeated character.\r\n            if (typeof v == 'string' && !/^.$|\\.|(.).*\\1/.test(v)) {\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * v {any}\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      return v instanceof BigNumber || v && v._isBigNumber === true || false;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0))\r\n              : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && ne <= TO_EXP_NEG\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var m, n,\r\n        i = 0;\r\n\r\n      if (isArray(args[0])) args = args[0];\r\n      m = new BigNumber(args[0]);\r\n\r\n      for (; ++i < args.length;) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n          x.c = x.e = null;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.c = x.e = x.s = null;\r\n        }\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + n);\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+x.valueOf(), nIsBig ? 2 - isOdd(n) : +n));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        nIsOdd = n % 2;\r\n      }\r\n\r\n      if (nIsNeg) n.s = 1;\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (nIsBig) {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n          if (!n.c[0]) break;\r\n          nIsBig = n.e > 14;\r\n          nIsOdd = isOdd(n);\r\n        } else {\r\n          n = mathfloor(n / 2);\r\n          if (!n) break;\r\n          nIsOdd = n % 2;\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+x);\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '1e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c  ).slice(0, s) === (n =\r\n             coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the FORMAT object (see BigNumber.set).\r\n     *\r\n     * FORMAT = {\r\n     *      decimalSeparator : '.',\r\n     *      groupSeparator : ',',\r\n     *      groupSize : 3,\r\n     *      secondaryGroupSize : 0,\r\n     *      fractionGroupSeparator : '\\xA0',    // non-breaking space\r\n     *      fractionGroupSize : 0\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFormat = function (dp, rm) {\r\n      var str = this.toFixed(dp, rm);\r\n\r\n      if (this.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +FORMAT.groupSize,\r\n          g2 = +FORMAT.secondaryGroupSize,\r\n          groupSeparator = FORMAT.groupSeparator,\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = this.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n\r\n          for (; i < len; i += g1) {\r\n            intPart += groupSeparator + intDigits.substr(i, g1);\r\n          }\r\n\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + FORMAT.decimalSeparator + ((g2 = +FORMAT.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + FORMAT.fractionGroupSeparator)\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string array representing the value of this BigNumber as a simple fraction with\r\n     * an integer numerator and an integer denominator. The denominator will be a positive\r\n     * non-zero value less than or equal to the specified maximum denominator. If a maximum\r\n     * denominator is not specified, the denominator will be the lowest value necessary to\r\n     * represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var arr, d, d0, d1, d2, e, exp, n, n0, n1, q, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + md);\r\n        }\r\n      }\r\n\r\n      if (!xc) return x.toString();\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e *= 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      arr = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n         div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1\r\n          ? [n1.toString(), d1.toString()]\r\n          : [n0.toString(), d0.toString()];\r\n\r\n      MAX_EXP = exp;\r\n      return arr;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +this;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        str = coeffToString(n.c);\r\n\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(str, e)\r\n           : toFixedPoint(str, e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(str, e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      var str,\r\n        n = this,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== (n < 0 ? mathceil(n) : mathfloor(n))) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + n);\r\n    }\r\n  }\r\n\r\n\r\n  function isArray(obj) {\r\n    return Object.prototype.toString.call(obj) == '[object Array]';\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"container-fluid\"},[(!_vm.claimed)?_c('div',{staticClass:\"container-fluid envelope-wrap\"},[_c('div',{staticClass:\"container-fluid envelope-container envelope-container--claim envelope--verified envelope-container--red envelope-container--with-card\"},[_c('div',{staticClass:\"container-fluid envelope-info\"},[_c('div',{staticClass:\"row envelope-info--top\"},[_c('div',{staticClass:\"col-xs-5 left-align\"},[_c('p',[_vm._v(\"Envelope #\"+_vm._s(_vm.envelope.id))])]),_c('div',{staticClass:\"col-xs-7 right-align\"},[_c('p',[_c('span',[_vm._v(\"Expires\\n                \"),_c('time',{attrs:{\"datetime\":\"2019-03-07T15:19:30.000Z\",\"title\":\"2019-03-07 15:19\"}},[_vm._v(\"in \"+_vm._s(_vm._f(\"duration\")(_vm.envelope.duration * 1000,'humanize')))])])])])]),_c('div',[_c('svg',{staticClass:\"svg--icon-dog\",attrs:{\"version\":\"1.1\",\"x\":\"0px\",\"y\":\"0px\",\"viewBox\":\"0 0 100 100\",\"xml:space\":\"preserve\"}},[_c('circle',{attrs:{\"cx\":\"46.2\",\"cy\":\"35\",\"r\":\"3.7\"}}),_c('path',{attrs:{\"d\":\"M63.7,31.3c-3.1-8.7-11.4-15-21.2-15l-7.5,0c-6.1,0-11.3,3.6-13.7,8.8c-5.2,2.4-8.8,7.6-8.8,13.7v30H20v15h37.5V61.2l7.5,0  c12.4,0,22.5-10.1,22.5-22.5v-7.5H63.7z M65,53.7h-7.5c-4.1,0-7.5,3.4-7.5,7.5v15H27.5v-7.5c8.3,0,15-6.7,15-15v-7.5  c0-2.1-1.7-3.7-3.8-3.7S35,44.2,35,46.3v7.5c0,4.1-3.4,7.5-7.5,7.5l-7.5,0V38.8c0-4.1,3.4-7.5,7.5-7.5c0-4.1,3.4-7.5,7.5-7.5h7.5  c8.3,0,15,6.7,15,15H65h15C80,47,73.3,53.7,65,53.7z\"}})])]),_c('div',{staticClass:\"envelope-info--message\"},[_c('h2',[_vm._v(_vm._s(_vm.envelope.message || 'Best wishes 🐶'))]),_c('p',[_vm._v(\"– \"+_vm._s(_vm.envelope.nickname || 'Anonymous'))])])]),_c('div',{staticClass:\"envelope--buttons\"},[_vm._m(0),_c('p',[_c('button',{staticClass:\"btn btn-env\",attrs:{\"disabled\":_vm.isClaiming},on:{\"click\":_vm.claim}},[_vm._v(_vm._s(_vm.isClaiming ? 'Claiming...' + _vm.counter : 'Claim'))])])])])]):_c('AfterClaimCard',{attrs:{\"envelope\":_vm.envelope,\"tokenName\":_vm.tokenName}})],1)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"envelope--input--disclaimer\"},[_c('p',[_c('span',[_vm._v(\"Click CLAIM to see how much you received.\")])])])}]\n\nexport { render, staticRenderFns }","import mod from \"-!../../node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js??ref--12-0!../../node_modules/_thread-loader@2.1.2@thread-loader/dist/cjs.js!../../node_modules/_babel-loader@8.0.5@babel-loader/lib/index.js!../../node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js??ref--0-0!../../node_modules/_vue-loader@15.7.0@vue-loader/lib/index.js??vue-loader-options!./ClaimCard.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js??ref--12-0!../../node_modules/_thread-loader@2.1.2@thread-loader/dist/cjs.js!../../node_modules/_babel-loader@8.0.5@babel-loader/lib/index.js!../../node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js??ref--0-0!../../node_modules/_vue-loader@15.7.0@vue-loader/lib/index.js??vue-loader-options!./ClaimCard.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ClaimCard.vue?vue&type=template&id=a746d2a4&\"\nimport script from \"./ClaimCard.vue?vue&type=script&lang=js&\"\nexport * from \"./ClaimCard.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/_vue-loader@15.7.0@vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BN = require(\"bn.js\");\n/**\n * RLP Encoding based on: https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-RLP\n * This function takes in a data, convert it to buffer if not, and a length for recursion\n * @param input - will be converted to buffer\n * @returns returns buffer of encoded data\n **/\nfunction encode(input) {\n    if (Array.isArray(input)) {\n        var output = [];\n        for (var i = 0; i < input.length; i++) {\n            output.push(encode(input[i]));\n        }\n        var buf = Buffer.concat(output);\n        return Buffer.concat([encodeLength(buf.length, 192), buf]);\n    }\n    else {\n        var inputBuf = toBuffer(input);\n        return inputBuf.length === 1 && inputBuf[0] < 128\n            ? inputBuf\n            : Buffer.concat([encodeLength(inputBuf.length, 128), inputBuf]);\n    }\n}\nexports.encode = encode;\n/**\n * Parse integers. Check if there is no leading zeros\n * @param v The value to parse\n * @param base The base to parse the integer into\n */\nfunction safeParseInt(v, base) {\n    if (v.slice(0, 2) === '00') {\n        throw new Error('invalid RLP: extra zeros');\n    }\n    return parseInt(v, base);\n}\nfunction encodeLength(len, offset) {\n    if (len < 56) {\n        return Buffer.from([len + offset]);\n    }\n    else {\n        var hexLength = intToHex(len);\n        var lLength = hexLength.length / 2;\n        var firstByte = intToHex(offset + 55 + lLength);\n        return Buffer.from(firstByte + hexLength, 'hex');\n    }\n}\nfunction decode(input, stream) {\n    if (stream === void 0) { stream = false; }\n    if (!input || input.length === 0) {\n        return Buffer.from([]);\n    }\n    var inputBuffer = toBuffer(input);\n    var decoded = _decode(inputBuffer);\n    if (stream) {\n        return decoded;\n    }\n    if (decoded.remainder.length !== 0) {\n        throw new Error('invalid remainder');\n    }\n    return decoded.data;\n}\nexports.decode = decode;\n/**\n * Get the length of the RLP input\n * @param input\n * @returns The length of the input or an empty Buffer if no input\n */\nfunction getLength(input) {\n    if (!input || input.length === 0) {\n        return Buffer.from([]);\n    }\n    var inputBuffer = toBuffer(input);\n    var firstByte = inputBuffer[0];\n    if (firstByte <= 0x7f) {\n        return inputBuffer.length;\n    }\n    else if (firstByte <= 0xb7) {\n        return firstByte - 0x7f;\n    }\n    else if (firstByte <= 0xbf) {\n        return firstByte - 0xb6;\n    }\n    else if (firstByte <= 0xf7) {\n        // a list between  0-55 bytes long\n        return firstByte - 0xbf;\n    }\n    else {\n        // a list  over 55 bytes long\n        var llength = firstByte - 0xf6;\n        var length = safeParseInt(inputBuffer.slice(1, llength).toString('hex'), 16);\n        return llength + length;\n    }\n}\nexports.getLength = getLength;\n/** Decode an input with RLP */\nfunction _decode(input) {\n    var length, llength, data, innerRemainder, d;\n    var decoded = [];\n    var firstByte = input[0];\n    if (firstByte <= 0x7f) {\n        // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.\n        return {\n            data: input.slice(0, 1),\n            remainder: input.slice(1),\n        };\n    }\n    else if (firstByte <= 0xb7) {\n        // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string\n        // The range of the first byte is [0x80, 0xb7]\n        length = firstByte - 0x7f;\n        // set 0x80 null to 0\n        if (firstByte === 0x80) {\n            data = Buffer.from([]);\n        }\n        else {\n            data = input.slice(1, length);\n        }\n        if (length === 2 && data[0] < 0x80) {\n            throw new Error('invalid rlp encoding: byte must be less 0x80');\n        }\n        return {\n            data: data,\n            remainder: input.slice(length),\n        };\n    }\n    else if (firstByte <= 0xbf) {\n        llength = firstByte - 0xb6;\n        length = safeParseInt(input.slice(1, llength).toString('hex'), 16);\n        data = input.slice(llength, length + llength);\n        if (data.length < length) {\n            throw new Error('invalid RLP');\n        }\n        return {\n            data: data,\n            remainder: input.slice(length + llength),\n        };\n    }\n    else if (firstByte <= 0xf7) {\n        // a list between  0-55 bytes long\n        length = firstByte - 0xbf;\n        innerRemainder = input.slice(1, length);\n        while (innerRemainder.length) {\n            d = _decode(innerRemainder);\n            decoded.push(d.data);\n            innerRemainder = d.remainder;\n        }\n        return {\n            data: decoded,\n            remainder: input.slice(length),\n        };\n    }\n    else {\n        // a list  over 55 bytes long\n        llength = firstByte - 0xf6;\n        length = safeParseInt(input.slice(1, llength).toString('hex'), 16);\n        var totalLength = llength + length;\n        if (totalLength > input.length) {\n            throw new Error('invalid rlp: total length is larger than the data');\n        }\n        innerRemainder = input.slice(llength, totalLength);\n        if (innerRemainder.length === 0) {\n            throw new Error('invalid rlp, List has a invalid length');\n        }\n        while (innerRemainder.length) {\n            d = _decode(innerRemainder);\n            decoded.push(d.data);\n            innerRemainder = d.remainder;\n        }\n        return {\n            data: decoded,\n            remainder: input.slice(totalLength),\n        };\n    }\n}\n/** Check if a string is prefixed by 0x */\nfunction isHexPrefixed(str) {\n    return str.slice(0, 2) === '0x';\n}\n/** Removes 0x from a given String */\nfunction stripHexPrefix(str) {\n    if (typeof str !== 'string') {\n        return str;\n    }\n    return isHexPrefixed(str) ? str.slice(2) : str;\n}\n/** Transform an integer into its hexadecimal value */\nfunction intToHex(integer) {\n    if (integer < 0) {\n        throw new Error('Invalid integer as argument, must be unsigned!');\n    }\n    var hex = integer.toString(16);\n    return hex.length % 2 ? \"0\" + hex : hex;\n}\n/** Pad a string to be even */\nfunction padToEven(a) {\n    return a.length % 2 ? \"0\" + a : a;\n}\n/** Transform an integer into a Buffer */\nfunction intToBuffer(integer) {\n    var hex = intToHex(integer);\n    return Buffer.from(hex, 'hex');\n}\n/** Transform anything into a Buffer */\nfunction toBuffer(v) {\n    if (!Buffer.isBuffer(v)) {\n        if (typeof v === 'string') {\n            if (isHexPrefixed(v)) {\n                return Buffer.from(padToEven(stripHexPrefix(v)), 'hex');\n            }\n            else {\n                return Buffer.from(v);\n            }\n        }\n        else if (typeof v === 'number') {\n            if (!v) {\n                return Buffer.from([]);\n            }\n            else {\n                return intToBuffer(v);\n            }\n        }\n        else if (v === null || v === undefined) {\n            return Buffer.from([]);\n        }\n        else if (v instanceof Uint8Array) {\n            return Buffer.from(v);\n        }\n        else if (BN.isBN(v)) {\n            // converts a BN to a Buffer\n            return Buffer.from(v.toArray());\n        }\n        else {\n            throw new Error('invalid type');\n        }\n    }\n    return v;\n}\n//# sourceMappingURL=index.js.map","var toInteger = require('./_to-integer');\nvar defined = require('./_defined');\n// true  -> String#at\n// false -> String#codePointAt\nmodule.exports = function (TO_STRING) {\n  return function (that, pos) {\n    var s = String(defined(that));\n    var i = toInteger(pos);\n    var l = s.length;\n    var a, b;\n    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};\n","<template>\n  <div class=\"app\">\n    <header class=\"navbar navbar-default\" id=\"header\">\n      <div class=\"container-fluid header\">\n        <div class=\"row\">\n          <div class=\"col-sm-3 col-xs-12 navbar-header header--logo\">\n            <h3><router-link :to=\"{ name: 'home'}\">Lucky Airdrop</router-link></h3>\n          </div>\n\n          <div class=\"col-sm-6 hidden-xs header--thor-info\">\n            <div class=\"header--thor-info--wrap\">\n              <div class=\"header--thor-info--wrap text-center\">\n                <div><strong>Your Account: </strong> <span><a :href=\"accountLink\" target=\"_blank\">{{ visitor }}</a></span></div> |\n                <div><strong>Network: </strong>{{ network }}</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </header>\n\n    <div class=\"container\">\n      <!-- 输入钱包地址 -->\n      <div v-if=\"showInptModal\" class=\"alert envelope--modal\">\n        <div class=\"envelope--modal--container\">\n          <div class=\"envelope--modal--loading\">\n            <span class=\"animated\">\n              <svg class=\"svg--icon-dog\" version=\"1.1\" x=\"0px\" y=\"0px\" viewBox=\"0 0 100 100\" xml:space=\"preserve\">\n                <circle cx=\"46.2\" cy=\"35\" r=\"3.7\"></circle>\n                <path d=\"M63.7,31.3c-3.1-8.7-11.4-15-21.2-15l-7.5,0c-6.1,0-11.3,3.6-13.7,8.8c-5.2,2.4-8.8,7.6-8.8,13.7v30H20v15h37.5V61.2l7.5,0  c12.4,0,22.5-10.1,22.5-22.5v-7.5H63.7z M65,53.7h-7.5c-4.1,0-7.5,3.4-7.5,7.5v15H27.5v-7.5c8.3,0,15-6.7,15-15v-7.5  c0-2.1-1.7-3.7-3.8-3.7S35,44.2,35,46.3v7.5c0,4.1-3.4,7.5-7.5,7.5l-7.5,0V38.8c0-4.1,3.4-7.5,7.5-7.5c0-4.1,3.4-7.5,7.5-7.5h7.5  c8.3,0,15,6.7,15,15H65h15C80,47,73.3,53.7,65,53.7z\"></path>\n              </svg>\n            </span>\n          </div>\n\n          <div class=\"envelope--modal--details\">\n            <div class=\"container-fluid\">\n              <div class=\"envelope--field\">\n                <h3>Input your address</h3>\n                <h4><span>Please input your wallet address to catch your luck.</span><br></h4>\n                <div class=\"envelope--input\">\n                  <div class=\"input-group\">\n                    <input v-bind:class=\"{'has-error': !isAddress()}\" type=\"text\" placeholder=\"0x\" v-model=\"address\">\n                  </div>\n                </div>\n              </div>\n\n              <div class=\"envelope--create-button--close\"><button :disabled=\"!isAddress()\" @click=\"handleContinue\"><h4>Continue</h4></button></div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <ShareCard :shareLink='shareLink' />\n\n      <RedPacketInfo v-if=\"role=='creator'\" :visitor=\"visitor\" :envelope=\"envelope\" :tokenName=\"tokenName\" />\n      <ClaimCard v-else-if=\"role=='claimer' && envelope.claimed == '0.00' && envelope.status != '2'\" :visitor=\"visitor\" :envelope=\"envelope\" :tokenName=\"tokenName\" />\n      <AfterClaimCard v-else-if=\"role=='claimer' && envelope.claimed != '0.00'\" :envelope=\"envelope\" :tokenName=\"tokenName\" />\n      <RedPacketInfo v-else :visitor=\"visitor\" :envelope=\"envelope\" :tokenName=\"tokenName\" />\n      \n      <CertModal v-show=\"showCertModal\" />\n    </div>\n  </div>\n  \n</template>\n\n\n<script>\nimport Utils from '../utils'\nimport BN from 'bignumber.js'\nimport CertModal from '@/components/CertModal.vue'\nimport RedPacketInfo from \"@/components/RedPacketInfo.vue\";\nimport ClaimCard from \"@/components/ClaimCard.vue\";\nimport AfterClaimCard from \"@/components/AfterClaimCard.vue\";\nimport ShareCard from '@/components/ShareCard.vue'\n\nimport { cry, abi, RLP } from 'thor-devkit'\n\nconst roles = {creator: 'creator', 'claimer': 'claimer'}\n\nexport default {\n  name: \"Claim\",\n  components: {\n    CertModal,\n    ShareCard,\n    RedPacketInfo,\n    ClaimCard,\n    AfterClaimCard,\n  },\n  data() {\n    return {\n      network: 'unkonwn',\n      address: '',\n      visitor: '',\n      shareLink: window.location.href,\n      accountLink: '',\n      role: '',\n      isCreator: false,\n      hasConnex: false,\n      showInptModal: true,\n      showCertModal: false,\n      tokenName: 'VET',\n      envelope: {},\n    }\n  },\n  created() {\n    this.network = this.$config.network\n    let { packet_id, code } = this.$route.params\n    this.$set(this.envelope, 'id', packet_id)\n\n    let spk\n    try { spk = atob(code).slice(2) }\n    catch(err) {\n      window.location.href = '#/404'\n      return\n    }\n\n    let address = localStorage.getItem(`claimed:${this.network}_${packet_id}`)\n    if (address && Utils.isAddress(address)) {\n      this.address = address\n    }\n    if (window.connex) {\n      this.hasConnex = true\n      this.showInptModal = false\n      this.showCertModal = true\n    }\n\n    this.getRevealInfo().then(() => {\n      let pubKey = cry.secp256k1.derivePublicKey(Buffer.from(spk, 'hex'))\n      let addr = '0x' + cry.publicKeyToAddress(pubKey).toString('hex')\n\n      if (this.envelope.secretSigner.toLowerCase() != addr) {\n        window.location.href = '#/404'\n        return\n      }\n      if (!window.connex) {\n        this.handleContinue()\n        return\n      }\n      \n      const signingService = connex.vendor.sign(\"cert\")\n\n      // Generate a random string and request the identification\n      signingService\n      .request({\n          purpose: \"identification\",\n          payload: {\n            type: \"text\",\n            content: \"Confirm that you would like this site to access your account\"\n          }\n      })\n      .then(result => {\n          this.showCertModal = false\n          this.setAccount(result.annex.signer)\n\n          return this.getPacketInfo().then(() => {\n            return this.setUserRole()\n          })\n      })\n    })\n  },\n  methods: {\n    isAddress() {\n      return Utils.isAddress(this.address);\n    },\n    setAccount(address) {\n      this.visitor = address\n      this.accountLink = this.$config.accountBaseUrl + '/accounts' + this.visitor\n    },\n    handleContinue() {\n      if (this.isAddress()) {\n        this.showInptModal = false\n        this.setAccount(this.address)\n\n        this.getPacketInfo().then(() => {\n          return this.setUserRole()\n        })\n      }\n    },\n    setUserRole() {\n      this.role = this.envelope.creator.toLowerCase() == this.visitor.toLowerCase() ? 'creator' : 'claimer'\n    },\n    getPacketInfo() {\n      let vm = this\n\n      let getEnvelopeInfoABI = {\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getEnvelopeInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint64\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}\n      let getClaimInfoABI = {\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_claimer\",\"type\":\"address\"}],\"name\":\"getClaimInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}\n\n      return Promise.all([\n        this.callMethod(getEnvelopeInfoABI, [this.envelope.id]),\n        this.callMethod(getClaimInfoABI, [this.envelope.id, vm.visitor]),\n      ])\n      .then(([info, claiminfo]) => {\n        let ts = parseInt((+new Date()) / 1000)\n\n        this.$set(vm.envelope, 'type', info[0])\n        this.$set(vm.envelope, 'status', info[1])\n        this.$set(vm.envelope, 'creator', info[2])\n        this.$set(vm.envelope, 'nickname', info[3])\n        this.$set(vm.envelope, 'expireAt', info[4])\n        this.$set(vm.envelope, 'duration', parseInt(info[4]) - ts)\n        this.$set(vm.envelope, 'message', '')\n        this.$set(vm.envelope, 'messageLink', info[5])\n        this.$set(vm.envelope, 'claimed', (new BN(claiminfo[0])).div(10**18).toFixed(2))\n\n        vm.tokenName = vm.getTokenNameByAddress(vm.envelope.tokenAddress)\n      })\n    },\n    getRevealInfo() {\n      let getEnvelopeRevealABI = {\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getEnvelopeReveal\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint64\"},{\"name\":\"\",\"type\":\"uint64\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}\n\n      return this.callMethod(getEnvelopeRevealABI, [this.envelope.id]).then(reveal => {\n\n        this.$set(this.envelope, 'tokenAddress', reveal[0])\n        this.$set(this.envelope, 'claimers', parseInt(reveal[1]))\n        this.$set(this.envelope, 'totalClaimers', parseInt(reveal[2]))\n        this.$set(this.envelope, 'initialBalance', (new BN(reveal[3])).div(10**18).toFixed(2))\n        this.$set(this.envelope, 'remaining', (new BN(reveal[4])).div(10**18).toFixed(2))\n        this.$set(this.envelope, 'secretSigner', reveal[5])\n      })\n    },\n    getTokenNameByAddress(tokenAddress) {\n      let tokenName = 'VET'\n      if (tokenAddress == '0x0000000000000000000000000000000000000000') {\n        return tokenName\n      }\n      Object.keys(this.$config.tokens).forEach(name => {\n        if (this.$config.tokens[name].toLowerCase() == tokenAddress.toLowerCase()) {\n          tokenName = name\n          return\n        }\n      })\n      return tokenName\n    },\n    callMethod(_abi, _values) {\n      let fn = new abi.Function(_abi)\n      let data = fn.encode(..._values)\n\n      let payload = { data: data, value: '0x0' }\n      if (this.visitor) {\n        payload.caller = this.visitor\n      }\n\n      return fetch(this.$config.providerUrl + `/accounts/${this.$config.contract}`, {\n        body: JSON.stringify(payload),\n        headers: {'content-type': 'application/json'},\n        method: 'POST',\n      })\n      .then(response => response.json())\n      .then(body => {\n        let decoded = abi.decodeParameters(_abi.outputs, body.data)\n        return decoded\n      })\n    }\n  }\n};\n</script>\n"],"sourceRoot":""}